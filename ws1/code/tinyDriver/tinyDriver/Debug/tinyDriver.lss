
tinyDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000596  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000060a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  0000060a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000060a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000063c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000481  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001ce  00000000  00000000  00000b59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001eb  00000000  00000000  00000d27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00000f14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000234  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022b  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000145b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	69 c0       	rjmp	.+210    	; 0xd8 <__vector_2>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	3a c0       	rjmp	.+116    	; 0x8c <__vector_11>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a7 36       	cpi	r26, 0x67	; 103
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	cf d0       	rcall	.+414    	; 0x1de <main>
  40:	a8 c2       	rjmp	.+1360   	; 0x592 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <motorForward>:
#include <avr/interrupt.h>
#include <util/delay.h>

int i;
void motorForward(int speed)
{
  44:	9c 01       	movw	r18, r24
	// non-inverting mode
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1);
  46:	9f b5       	in	r25, 0x2f	; 47
  48:	90 6a       	ori	r25, 0xA0	; 160
  4a:	9f bd       	out	0x2f, r25	; 47
	PORTA |= 1<<PA7;
  4c:	df 9a       	sbi	0x1b, 7	; 27
	PORTB |= 1<<PB2;
  4e:	c2 9a       	sbi	0x18, 2	; 24
	OCR1A = OCR1B = speed;
  50:	39 bd       	out	0x29, r19	; 41
  52:	28 bd       	out	0x28, r18	; 40
  54:	3b bd       	out	0x2b, r19	; 43
  56:	2a bd       	out	0x2a, r18	; 42
  58:	08 95       	ret

0000005a <motorReverse>:
	//_delay_ms(50);
}

void motorReverse(int speed)
{
  5a:	9c 01       	movw	r18, r24
	// non-inverting mode
    TCCR1A |= (1<<COM1A1)|(1<<COM1B1);
  5c:	9f b5       	in	r25, 0x2f	; 47
  5e:	90 6a       	ori	r25, 0xA0	; 160
  60:	9f bd       	out	0x2f, r25	; 47
	PORTA &= ~(1<<PA7);
  62:	df 98       	cbi	0x1b, 7	; 27
	PORTB &= ~(1<<PB2);
  64:	c2 98       	cbi	0x18, 2	; 24
	OCR1A = OCR1B = speed;
  66:	39 bd       	out	0x29, r19	; 41
  68:	28 bd       	out	0x28, r18	; 40
  6a:	3b bd       	out	0x2b, r19	; 43
  6c:	2a bd       	out	0x2a, r18	; 42
  6e:	08 95       	ret

00000070 <motorLeft>:
	//_delay_ms(50);
}

void motorLeft(int speed)
{
  70:	9c 01       	movw	r18, r24
	// non-inverting mode
	// left motor off, right motor on
	TCCR1A &= ~(1<<COM1A1);
  72:	9f b5       	in	r25, 0x2f	; 47
  74:	9f 77       	andi	r25, 0x7F	; 127
  76:	9f bd       	out	0x2f, r25	; 47
	TCCR1B |= 1<<COM1B1;
  78:	9e b5       	in	r25, 0x2e	; 46
  7a:	90 62       	ori	r25, 0x20	; 32
  7c:	9e bd       	out	0x2e, r25	; 46
	OCR1B = speed;
  7e:	39 bd       	out	0x29, r19	; 41
  80:	28 bd       	out	0x28, r18	; 40
  82:	08 95       	ret

00000084 <motorStop>:
	OCR1A = speed;
}

void motorStop()
{
	TCCR1A &= ~((1<<COM1A1)|(1<<COM1B1));
  84:	8f b5       	in	r24, 0x2f	; 47
  86:	8f 75       	andi	r24, 0x5F	; 95
  88:	8f bd       	out	0x2f, r24	; 47
  8a:	08 95       	ret

0000008c <__vector_11>:
uint32_t countTimer0 = 0;

//begin HCSR04

ISR(TIM0_OVF_vect)
{
  8c:	1f 92       	push	r1
  8e:	0f 92       	push	r0
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	0f 92       	push	r0
  94:	11 24       	eor	r1, r1
  96:	8f 93       	push	r24
  98:	9f 93       	push	r25
  9a:	af 93       	push	r26
  9c:	bf 93       	push	r27
	countTimer0 += 255;
  9e:	80 91 60 00 	lds	r24, 0x0060
  a2:	90 91 61 00 	lds	r25, 0x0061
  a6:	a0 91 62 00 	lds	r26, 0x0062
  aa:	b0 91 63 00 	lds	r27, 0x0063
  ae:	81 50       	subi	r24, 0x01	; 1
  b0:	9f 4f       	sbci	r25, 0xFF	; 255
  b2:	af 4f       	sbci	r26, 0xFF	; 255
  b4:	bf 4f       	sbci	r27, 0xFF	; 255
  b6:	80 93 60 00 	sts	0x0060, r24
  ba:	90 93 61 00 	sts	0x0061, r25
  be:	a0 93 62 00 	sts	0x0062, r26
  c2:	b0 93 63 00 	sts	0x0063, r27
}
  c6:	bf 91       	pop	r27
  c8:	af 91       	pop	r26
  ca:	9f 91       	pop	r25
  cc:	8f 91       	pop	r24
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <__vector_2>:

//pin-change interrupt handler
ISR(PCINT0_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	2f 93       	push	r18
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	af 93       	push	r26
  ea:	bf 93       	push	r27
	// read PCINT0
	if (PINA & (1<<pinEcho))
  ec:	89 b3       	in	r24, 0x19	; 25
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	00 90 65 00 	lds	r0, 0x0065
  f4:	02 c0       	rjmp	.+4      	; 0xfa <__vector_2+0x22>
  f6:	95 95       	asr	r25
  f8:	87 95       	ror	r24
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <__vector_2+0x1e>
  fe:	80 ff       	sbrs	r24, 0
 100:	07 c0       	rjmp	.+14     	; 0x110 <__vector_2+0x38>
	{
		//start 16 bit timer
		// Divide by 1 - prescalar
		TCCR0B |= 1<<CS00;
 102:	83 b7       	in	r24, 0x33	; 51
 104:	81 60       	ori	r24, 0x01	; 1
 106:	83 bf       	out	0x33, r24	; 51
		// set interrupt overflow flag
		TIMSK0 |= 1<<TOIE0;
 108:	89 b7       	in	r24, 0x39	; 57
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	89 bf       	out	0x39, r24	; 57
 10e:	1c c0       	rjmp	.+56     	; 0x148 <__vector_2+0x70>
	}
	else
	{
		// stop timer
		TCCR0B &= ~(1<<CS00);
 110:	83 b7       	in	r24, 0x33	; 51
 112:	8e 7f       	andi	r24, 0xFE	; 254
 114:	83 bf       	out	0x33, r24	; 51
		// calculate time elapsed
		countTimer0 += TCNT0;
 116:	22 b7       	in	r18, 0x32	; 50
 118:	80 91 60 00 	lds	r24, 0x0060
 11c:	90 91 61 00 	lds	r25, 0x0061
 120:	a0 91 62 00 	lds	r26, 0x0062
 124:	b0 91 63 00 	lds	r27, 0x0063
 128:	82 0f       	add	r24, r18
 12a:	91 1d       	adc	r25, r1
 12c:	a1 1d       	adc	r26, r1
 12e:	b1 1d       	adc	r27, r1
 130:	80 93 60 00 	sts	0x0060, r24
 134:	90 93 61 00 	sts	0x0061, r25
 138:	a0 93 62 00 	sts	0x0062, r26
 13c:	b0 93 63 00 	sts	0x0063, r27
		// reset counter - TCNT0
		TCNT0 = 0;
 140:	12 be       	out	0x32, r1	; 50
		// set flag
		echoDone = 1;
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	80 93 64 00 	sts	0x0064, r24
	}
}
 148:	bf 91       	pop	r27
 14a:	af 91       	pop	r26
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <getDistance>:

float getDistance()
{
	float distance = 0.0;
	
	cli();
 15c:	f8 94       	cli
	
	// interrupt enable
	GIMSK |= 1<<PCIE0;
 15e:	8b b7       	in	r24, 0x3b	; 59
 160:	80 61       	ori	r24, 0x10	; 16
 162:	8b bf       	out	0x3b, r24	; 59
	// enable pin
	PCMSK0 |= 1<<PCINT0;
 164:	90 9a       	sbi	0x12, 0	; 18
	
	sei();
 166:	78 94       	sei
	
	// reset echo flag
	echoDone = 0;
 168:	10 92 64 00 	sts	0x0064, r1
	// reset counter
	countTimer0 = 0;
 16c:	10 92 60 00 	sts	0x0060, r1
 170:	10 92 61 00 	sts	0x0061, r1
 174:	10 92 62 00 	sts	0x0062, r1
 178:	10 92 63 00 	sts	0x0063, r1
	
	// send 10us trigger pulse
	
	PORTB &= ~(1<<PB0);
 17c:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	8f e3       	ldi	r24, 0x3F	; 63
 180:	9c e9       	ldi	r25, 0x9C	; 156
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <getDistance+0x26>
 186:	00 c0       	rjmp	.+0      	; 0x188 <getDistance+0x2c>
 188:	00 00       	nop
	_delay_ms(20);
	PORTB |= (1<<PB0);
 18a:	c0 9a       	sbi	0x18, 0	; 24
 18c:	8f eb       	ldi	r24, 0xBF	; 191
 18e:	9d e5       	ldi	r25, 0x5D	; 93
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <getDistance+0x34>
 194:	00 c0       	rjmp	.+0      	; 0x196 <getDistance+0x3a>
 196:	00 00       	nop
	_delay_ms(12);
	PORTB &= ~(1<<PB0);
 198:	c0 98       	cbi	0x18, 0	; 24
 19a:	8f e3       	ldi	r24, 0x3F	; 63
 19c:	9c e9       	ldi	r25, 0x9C	; 156
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <getDistance+0x42>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <getDistance+0x48>
 1a4:	00 00       	nop
	_delay_ms(20);
	
	// listen for echo
	while(!echoDone);
 1a6:	80 91 64 00 	lds	r24, 0x0064
 1aa:	88 23       	and	r24, r24
 1ac:	e1 f3       	breq	.-8      	; 0x1a6 <getDistance+0x4a>
	
	// disable interrupt
	GIMSK &= ~(1<<PCIE0);
 1ae:	8b b7       	in	r24, 0x3b	; 59
 1b0:	8f 7e       	andi	r24, 0xEF	; 239
 1b2:	8b bf       	out	0x3b, r24	; 59
	// disable pin
	PCMSK0 &= ~(1<<PCINT0);
 1b4:	90 98       	cbi	0x12, 0	; 18

	// calculate duration
	float duration = countTimer0/8000000.0;
 1b6:	60 91 60 00 	lds	r22, 0x0060
 1ba:	70 91 61 00 	lds	r23, 0x0061
 1be:	80 91 62 00 	lds	r24, 0x0062
 1c2:	90 91 63 00 	lds	r25, 0x0063
 1c6:	c4 d0       	rcall	.+392    	; 0x350 <__floatunsisf>
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	34 e2       	ldi	r19, 0x24	; 36
 1cc:	44 ef       	ldi	r20, 0xF4	; 244
 1ce:	5a e4       	ldi	r21, 0x4A	; 74
 1d0:	57 d0       	rcall	.+174    	; 0x280 <__divsf3>
	
	// distance = duration * speed of sound * 0.5;
	// distance(in cms) = duration * 340.26 * 0.5 * 100
	// distance = 17013 * duration
	distance = 17013.0 * duration;
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	3a ee       	ldi	r19, 0xEA	; 234
 1d6:	44 e8       	ldi	r20, 0x84	; 132
 1d8:	56 e4       	ldi	r21, 0x46	; 70
 1da:	4c d1       	rcall	.+664    	; 0x474 <__mulsf3>
	
	return distance;	
}
 1dc:	08 95       	ret

000001de <main>:

int main(void)
{
	// pin set-up
	// PB1 - mode pin HIGH for phase enable in motor driver, PB0 - trigger, PB2 - GPIO for motor 2
	DDRB |= (1<<PB2)|(1<<PB1)|(1<<PB0);
 1de:	87 b3       	in	r24, 0x17	; 23
 1e0:	87 60       	ori	r24, 0x07	; 7
 1e2:	87 bb       	out	0x17, r24	; 23
	// PA6, PA5 = OC1A, OC1B - PWM, PA7 = GPIO for motor 1
	DDRA |= (1<<PA7)|(1<<PA6)|(1<<PA5);
 1e4:	8a b3       	in	r24, 0x1a	; 26
 1e6:	80 6e       	ori	r24, 0xE0	; 224
 1e8:	8a bb       	out	0x1a, r24	; 26
	// Pull-up mode for PA0 - echo pin
	PORTB |= 1<<PB1;
 1ea:	c1 9a       	sbi	0x18, 1	; 24
	
	// TIMER0 PWM configurations
	// Phase Correct PWM, TOP = 0xFF
    TCCR1A |= (1<<WGM10);
 1ec:	8f b5       	in	r24, 0x2f	; 47
 1ee:	81 60       	ori	r24, 0x01	; 1
 1f0:	8f bd       	out	0x2f, r24	; 47
	// CLK/8 pre-scalar for 2KHz motor frequency
	TCCR1B |= 1<<CS11;
 1f2:	8e b5       	in	r24, 0x2e	; 46
 1f4:	82 60       	ori	r24, 0x02	; 2
 1f6:	8e bd       	out	0x2e, r24	; 46
	// register clear while in PWM mode
	TCCR1C = 0x00;
 1f8:	12 bc       	out	0x22, r1	; 34
	}
*/	
	
	while (1) 
    {	
		float dist = getDistance();
 1fa:	b0 df       	rcall	.-160    	; 0x15c <getDistance>
 1fc:	6b 01       	movw	r12, r22
 1fe:	7c 01       	movw	r14, r24
		if(dist>400)
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	48 ec       	ldi	r20, 0xC8	; 200
 206:	53 e4       	ldi	r21, 0x43	; 67
 208:	31 d1       	rcall	.+610    	; 0x46c <__gesf2>
 20a:	18 16       	cp	r1, r24
 20c:	6c f0       	brlt	.+26     	; 0x228 <main+0x4a>
		{
			dist = prevDist;
		}
		//prevDist = dist;
		if(dist>=10)
 20e:	20 e0       	ldi	r18, 0x00	; 0
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	40 e2       	ldi	r20, 0x20	; 32
 214:	51 e4       	ldi	r21, 0x41	; 65
 216:	c7 01       	movw	r24, r14
 218:	b6 01       	movw	r22, r12
 21a:	28 d1       	rcall	.+592    	; 0x46c <__gesf2>
 21c:	88 23       	and	r24, r24
 21e:	24 f0       	brlt	.+8      	; 0x228 <main+0x4a>
		{
			// no obstacle detected
			// move forward
			motorForward(150);
 220:	86 e9       	ldi	r24, 0x96	; 150
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0f df       	rcall	.-482    	; 0x44 <motorForward>
 226:	22 c0       	rjmp	.+68     	; 0x26c <__stack+0xd>
		}
		else
		{
			motorStop();
 228:	2d df       	rcall	.-422    	; 0x84 <motorStop>
 22a:	2f ef       	ldi	r18, 0xFF	; 255
 22c:	89 e6       	ldi	r24, 0x69	; 105
 22e:	98 e1       	ldi	r25, 0x18	; 24
 230:	21 50       	subi	r18, 0x01	; 1
 232:	80 40       	sbci	r24, 0x00	; 0
 234:	90 40       	sbci	r25, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <main+0x52>
 238:	00 c0       	rjmp	.+0      	; 0x23a <main+0x5c>
 23a:	00 00       	nop
			_delay_ms(1000);
			motorReverse(150);
 23c:	86 e9       	ldi	r24, 0x96	; 150
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0c df       	rcall	.-488    	; 0x5a <motorReverse>
 242:	2f ef       	ldi	r18, 0xFF	; 255
 244:	83 ed       	ldi	r24, 0xD3	; 211
 246:	90 e3       	ldi	r25, 0x30	; 48
 248:	21 50       	subi	r18, 0x01	; 1
 24a:	80 40       	sbci	r24, 0x00	; 0
 24c:	90 40       	sbci	r25, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <main+0x6a>
 250:	00 c0       	rjmp	.+0      	; 0x252 <main+0x74>
 252:	00 00       	nop
			_delay_ms(2000);
			motorLeft(150);
 254:	86 e9       	ldi	r24, 0x96	; 150
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0b df       	rcall	.-490    	; 0x70 <motorLeft>
 25a:	2f ef       	ldi	r18, 0xFF	; 255
 25c:	89 e6       	ldi	r24, 0x69	; 105
 25e:	98 e1       	ldi	r25, 0x18	; 24
 260:	21 50       	subi	r18, 0x01	; 1
 262:	80 40       	sbci	r24, 0x00	; 0
 264:	90 40       	sbci	r25, 0x00	; 0
 266:	e1 f7       	brne	.-8      	; 0x260 <__stack+0x1>
 268:	00 c0       	rjmp	.+0      	; 0x26a <__stack+0xb>
 26a:	00 00       	nop
 26c:	2f e7       	ldi	r18, 0x7F	; 127
 26e:	88 e3       	ldi	r24, 0x38	; 56
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	21 50       	subi	r18, 0x01	; 1
 274:	80 40       	sbci	r24, 0x00	; 0
 276:	90 40       	sbci	r25, 0x00	; 0
 278:	e1 f7       	brne	.-8      	; 0x272 <__stack+0x13>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <__stack+0x1d>
 27c:	00 00       	nop
 27e:	bd cf       	rjmp	.-134    	; 0x1fa <main+0x1c>

00000280 <__divsf3>:
 280:	0c d0       	rcall	.+24     	; 0x29a <__divsf3x>
 282:	ba c0       	rjmp	.+372    	; 0x3f8 <__fp_round>
 284:	b2 d0       	rcall	.+356    	; 0x3ea <__fp_pscB>
 286:	40 f0       	brcs	.+16     	; 0x298 <__divsf3+0x18>
 288:	a9 d0       	rcall	.+338    	; 0x3dc <__fp_pscA>
 28a:	30 f0       	brcs	.+12     	; 0x298 <__divsf3+0x18>
 28c:	21 f4       	brne	.+8      	; 0x296 <__divsf3+0x16>
 28e:	5f 3f       	cpi	r21, 0xFF	; 255
 290:	19 f0       	breq	.+6      	; 0x298 <__divsf3+0x18>
 292:	9b c0       	rjmp	.+310    	; 0x3ca <__fp_inf>
 294:	51 11       	cpse	r21, r1
 296:	e4 c0       	rjmp	.+456    	; 0x460 <__fp_szero>
 298:	9e c0       	rjmp	.+316    	; 0x3d6 <__fp_nan>

0000029a <__divsf3x>:
 29a:	bf d0       	rcall	.+382    	; 0x41a <__fp_split3>
 29c:	98 f3       	brcs	.-26     	; 0x284 <__divsf3+0x4>

0000029e <__divsf3_pse>:
 29e:	99 23       	and	r25, r25
 2a0:	c9 f3       	breq	.-14     	; 0x294 <__divsf3+0x14>
 2a2:	55 23       	and	r21, r21
 2a4:	b1 f3       	breq	.-20     	; 0x292 <__divsf3+0x12>
 2a6:	95 1b       	sub	r25, r21
 2a8:	55 0b       	sbc	r21, r21
 2aa:	bb 27       	eor	r27, r27
 2ac:	aa 27       	eor	r26, r26
 2ae:	62 17       	cp	r22, r18
 2b0:	73 07       	cpc	r23, r19
 2b2:	84 07       	cpc	r24, r20
 2b4:	38 f0       	brcs	.+14     	; 0x2c4 <__divsf3_pse+0x26>
 2b6:	9f 5f       	subi	r25, 0xFF	; 255
 2b8:	5f 4f       	sbci	r21, 0xFF	; 255
 2ba:	22 0f       	add	r18, r18
 2bc:	33 1f       	adc	r19, r19
 2be:	44 1f       	adc	r20, r20
 2c0:	aa 1f       	adc	r26, r26
 2c2:	a9 f3       	breq	.-22     	; 0x2ae <__divsf3_pse+0x10>
 2c4:	33 d0       	rcall	.+102    	; 0x32c <__divsf3_pse+0x8e>
 2c6:	0e 2e       	mov	r0, r30
 2c8:	3a f0       	brmi	.+14     	; 0x2d8 <__divsf3_pse+0x3a>
 2ca:	e0 e8       	ldi	r30, 0x80	; 128
 2cc:	30 d0       	rcall	.+96     	; 0x32e <__divsf3_pse+0x90>
 2ce:	91 50       	subi	r25, 0x01	; 1
 2d0:	50 40       	sbci	r21, 0x00	; 0
 2d2:	e6 95       	lsr	r30
 2d4:	00 1c       	adc	r0, r0
 2d6:	ca f7       	brpl	.-14     	; 0x2ca <__divsf3_pse+0x2c>
 2d8:	29 d0       	rcall	.+82     	; 0x32c <__divsf3_pse+0x8e>
 2da:	fe 2f       	mov	r31, r30
 2dc:	27 d0       	rcall	.+78     	; 0x32c <__divsf3_pse+0x8e>
 2de:	66 0f       	add	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	88 1f       	adc	r24, r24
 2e4:	bb 1f       	adc	r27, r27
 2e6:	26 17       	cp	r18, r22
 2e8:	37 07       	cpc	r19, r23
 2ea:	48 07       	cpc	r20, r24
 2ec:	ab 07       	cpc	r26, r27
 2ee:	b0 e8       	ldi	r27, 0x80	; 128
 2f0:	09 f0       	breq	.+2      	; 0x2f4 <__divsf3_pse+0x56>
 2f2:	bb 0b       	sbc	r27, r27
 2f4:	80 2d       	mov	r24, r0
 2f6:	bf 01       	movw	r22, r30
 2f8:	ff 27       	eor	r31, r31
 2fa:	93 58       	subi	r25, 0x83	; 131
 2fc:	5f 4f       	sbci	r21, 0xFF	; 255
 2fe:	2a f0       	brmi	.+10     	; 0x30a <__divsf3_pse+0x6c>
 300:	9e 3f       	cpi	r25, 0xFE	; 254
 302:	51 05       	cpc	r21, r1
 304:	68 f0       	brcs	.+26     	; 0x320 <__divsf3_pse+0x82>
 306:	61 c0       	rjmp	.+194    	; 0x3ca <__fp_inf>
 308:	ab c0       	rjmp	.+342    	; 0x460 <__fp_szero>
 30a:	5f 3f       	cpi	r21, 0xFF	; 255
 30c:	ec f3       	brlt	.-6      	; 0x308 <__divsf3_pse+0x6a>
 30e:	98 3e       	cpi	r25, 0xE8	; 232
 310:	dc f3       	brlt	.-10     	; 0x308 <__divsf3_pse+0x6a>
 312:	86 95       	lsr	r24
 314:	77 95       	ror	r23
 316:	67 95       	ror	r22
 318:	b7 95       	ror	r27
 31a:	f7 95       	ror	r31
 31c:	9f 5f       	subi	r25, 0xFF	; 255
 31e:	c9 f7       	brne	.-14     	; 0x312 <__divsf3_pse+0x74>
 320:	88 0f       	add	r24, r24
 322:	91 1d       	adc	r25, r1
 324:	96 95       	lsr	r25
 326:	87 95       	ror	r24
 328:	97 f9       	bld	r25, 7
 32a:	08 95       	ret
 32c:	e1 e0       	ldi	r30, 0x01	; 1
 32e:	66 0f       	add	r22, r22
 330:	77 1f       	adc	r23, r23
 332:	88 1f       	adc	r24, r24
 334:	bb 1f       	adc	r27, r27
 336:	62 17       	cp	r22, r18
 338:	73 07       	cpc	r23, r19
 33a:	84 07       	cpc	r24, r20
 33c:	ba 07       	cpc	r27, r26
 33e:	20 f0       	brcs	.+8      	; 0x348 <__divsf3_pse+0xaa>
 340:	62 1b       	sub	r22, r18
 342:	73 0b       	sbc	r23, r19
 344:	84 0b       	sbc	r24, r20
 346:	ba 0b       	sbc	r27, r26
 348:	ee 1f       	adc	r30, r30
 34a:	88 f7       	brcc	.-30     	; 0x32e <__divsf3_pse+0x90>
 34c:	e0 95       	com	r30
 34e:	08 95       	ret

00000350 <__floatunsisf>:
 350:	e8 94       	clt
 352:	09 c0       	rjmp	.+18     	; 0x366 <__floatsisf+0x12>

00000354 <__floatsisf>:
 354:	97 fb       	bst	r25, 7
 356:	3e f4       	brtc	.+14     	; 0x366 <__floatsisf+0x12>
 358:	90 95       	com	r25
 35a:	80 95       	com	r24
 35c:	70 95       	com	r23
 35e:	61 95       	neg	r22
 360:	7f 4f       	sbci	r23, 0xFF	; 255
 362:	8f 4f       	sbci	r24, 0xFF	; 255
 364:	9f 4f       	sbci	r25, 0xFF	; 255
 366:	99 23       	and	r25, r25
 368:	a9 f0       	breq	.+42     	; 0x394 <__floatsisf+0x40>
 36a:	f9 2f       	mov	r31, r25
 36c:	96 e9       	ldi	r25, 0x96	; 150
 36e:	bb 27       	eor	r27, r27
 370:	93 95       	inc	r25
 372:	f6 95       	lsr	r31
 374:	87 95       	ror	r24
 376:	77 95       	ror	r23
 378:	67 95       	ror	r22
 37a:	b7 95       	ror	r27
 37c:	f1 11       	cpse	r31, r1
 37e:	f8 cf       	rjmp	.-16     	; 0x370 <__floatsisf+0x1c>
 380:	fa f4       	brpl	.+62     	; 0x3c0 <__floatsisf+0x6c>
 382:	bb 0f       	add	r27, r27
 384:	11 f4       	brne	.+4      	; 0x38a <__floatsisf+0x36>
 386:	60 ff       	sbrs	r22, 0
 388:	1b c0       	rjmp	.+54     	; 0x3c0 <__floatsisf+0x6c>
 38a:	6f 5f       	subi	r22, 0xFF	; 255
 38c:	7f 4f       	sbci	r23, 0xFF	; 255
 38e:	8f 4f       	sbci	r24, 0xFF	; 255
 390:	9f 4f       	sbci	r25, 0xFF	; 255
 392:	16 c0       	rjmp	.+44     	; 0x3c0 <__floatsisf+0x6c>
 394:	88 23       	and	r24, r24
 396:	11 f0       	breq	.+4      	; 0x39c <__floatsisf+0x48>
 398:	96 e9       	ldi	r25, 0x96	; 150
 39a:	11 c0       	rjmp	.+34     	; 0x3be <__floatsisf+0x6a>
 39c:	77 23       	and	r23, r23
 39e:	21 f0       	breq	.+8      	; 0x3a8 <__floatsisf+0x54>
 3a0:	9e e8       	ldi	r25, 0x8E	; 142
 3a2:	87 2f       	mov	r24, r23
 3a4:	76 2f       	mov	r23, r22
 3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <__floatsisf+0x5e>
 3a8:	66 23       	and	r22, r22
 3aa:	71 f0       	breq	.+28     	; 0x3c8 <__floatsisf+0x74>
 3ac:	96 e8       	ldi	r25, 0x86	; 134
 3ae:	86 2f       	mov	r24, r22
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	2a f0       	brmi	.+10     	; 0x3c0 <__floatsisf+0x6c>
 3b6:	9a 95       	dec	r25
 3b8:	66 0f       	add	r22, r22
 3ba:	77 1f       	adc	r23, r23
 3bc:	88 1f       	adc	r24, r24
 3be:	da f7       	brpl	.-10     	; 0x3b6 <__floatsisf+0x62>
 3c0:	88 0f       	add	r24, r24
 3c2:	96 95       	lsr	r25
 3c4:	87 95       	ror	r24
 3c6:	97 f9       	bld	r25, 7
 3c8:	08 95       	ret

000003ca <__fp_inf>:
 3ca:	97 f9       	bld	r25, 7
 3cc:	9f 67       	ori	r25, 0x7F	; 127
 3ce:	80 e8       	ldi	r24, 0x80	; 128
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	08 95       	ret

000003d6 <__fp_nan>:
 3d6:	9f ef       	ldi	r25, 0xFF	; 255
 3d8:	80 ec       	ldi	r24, 0xC0	; 192
 3da:	08 95       	ret

000003dc <__fp_pscA>:
 3dc:	00 24       	eor	r0, r0
 3de:	0a 94       	dec	r0
 3e0:	16 16       	cp	r1, r22
 3e2:	17 06       	cpc	r1, r23
 3e4:	18 06       	cpc	r1, r24
 3e6:	09 06       	cpc	r0, r25
 3e8:	08 95       	ret

000003ea <__fp_pscB>:
 3ea:	00 24       	eor	r0, r0
 3ec:	0a 94       	dec	r0
 3ee:	12 16       	cp	r1, r18
 3f0:	13 06       	cpc	r1, r19
 3f2:	14 06       	cpc	r1, r20
 3f4:	05 06       	cpc	r0, r21
 3f6:	08 95       	ret

000003f8 <__fp_round>:
 3f8:	09 2e       	mov	r0, r25
 3fa:	03 94       	inc	r0
 3fc:	00 0c       	add	r0, r0
 3fe:	11 f4       	brne	.+4      	; 0x404 <__fp_round+0xc>
 400:	88 23       	and	r24, r24
 402:	52 f0       	brmi	.+20     	; 0x418 <__fp_round+0x20>
 404:	bb 0f       	add	r27, r27
 406:	40 f4       	brcc	.+16     	; 0x418 <__fp_round+0x20>
 408:	bf 2b       	or	r27, r31
 40a:	11 f4       	brne	.+4      	; 0x410 <__fp_round+0x18>
 40c:	60 ff       	sbrs	r22, 0
 40e:	04 c0       	rjmp	.+8      	; 0x418 <__fp_round+0x20>
 410:	6f 5f       	subi	r22, 0xFF	; 255
 412:	7f 4f       	sbci	r23, 0xFF	; 255
 414:	8f 4f       	sbci	r24, 0xFF	; 255
 416:	9f 4f       	sbci	r25, 0xFF	; 255
 418:	08 95       	ret

0000041a <__fp_split3>:
 41a:	57 fd       	sbrc	r21, 7
 41c:	90 58       	subi	r25, 0x80	; 128
 41e:	44 0f       	add	r20, r20
 420:	55 1f       	adc	r21, r21
 422:	59 f0       	breq	.+22     	; 0x43a <__fp_splitA+0x10>
 424:	5f 3f       	cpi	r21, 0xFF	; 255
 426:	71 f0       	breq	.+28     	; 0x444 <__fp_splitA+0x1a>
 428:	47 95       	ror	r20

0000042a <__fp_splitA>:
 42a:	88 0f       	add	r24, r24
 42c:	97 fb       	bst	r25, 7
 42e:	99 1f       	adc	r25, r25
 430:	61 f0       	breq	.+24     	; 0x44a <__fp_splitA+0x20>
 432:	9f 3f       	cpi	r25, 0xFF	; 255
 434:	79 f0       	breq	.+30     	; 0x454 <__fp_splitA+0x2a>
 436:	87 95       	ror	r24
 438:	08 95       	ret
 43a:	12 16       	cp	r1, r18
 43c:	13 06       	cpc	r1, r19
 43e:	14 06       	cpc	r1, r20
 440:	55 1f       	adc	r21, r21
 442:	f2 cf       	rjmp	.-28     	; 0x428 <__fp_split3+0xe>
 444:	46 95       	lsr	r20
 446:	f1 df       	rcall	.-30     	; 0x42a <__fp_splitA>
 448:	08 c0       	rjmp	.+16     	; 0x45a <__fp_splitA+0x30>
 44a:	16 16       	cp	r1, r22
 44c:	17 06       	cpc	r1, r23
 44e:	18 06       	cpc	r1, r24
 450:	99 1f       	adc	r25, r25
 452:	f1 cf       	rjmp	.-30     	; 0x436 <__fp_splitA+0xc>
 454:	86 95       	lsr	r24
 456:	71 05       	cpc	r23, r1
 458:	61 05       	cpc	r22, r1
 45a:	08 94       	sec
 45c:	08 95       	ret

0000045e <__fp_zero>:
 45e:	e8 94       	clt

00000460 <__fp_szero>:
 460:	bb 27       	eor	r27, r27
 462:	66 27       	eor	r22, r22
 464:	77 27       	eor	r23, r23
 466:	cb 01       	movw	r24, r22
 468:	97 f9       	bld	r25, 7
 46a:	08 95       	ret

0000046c <__gesf2>:
 46c:	6e d0       	rcall	.+220    	; 0x54a <__fp_cmp>
 46e:	08 f4       	brcc	.+2      	; 0x472 <__gesf2+0x6>
 470:	8f ef       	ldi	r24, 0xFF	; 255
 472:	08 95       	ret

00000474 <__mulsf3>:
 474:	0a d0       	rcall	.+20     	; 0x48a <__mulsf3x>
 476:	c0 cf       	rjmp	.-128    	; 0x3f8 <__fp_round>
 478:	b1 df       	rcall	.-158    	; 0x3dc <__fp_pscA>
 47a:	28 f0       	brcs	.+10     	; 0x486 <__mulsf3+0x12>
 47c:	b6 df       	rcall	.-148    	; 0x3ea <__fp_pscB>
 47e:	18 f0       	brcs	.+6      	; 0x486 <__mulsf3+0x12>
 480:	95 23       	and	r25, r21
 482:	09 f0       	breq	.+2      	; 0x486 <__mulsf3+0x12>
 484:	a2 cf       	rjmp	.-188    	; 0x3ca <__fp_inf>
 486:	a7 cf       	rjmp	.-178    	; 0x3d6 <__fp_nan>
 488:	eb cf       	rjmp	.-42     	; 0x460 <__fp_szero>

0000048a <__mulsf3x>:
 48a:	c7 df       	rcall	.-114    	; 0x41a <__fp_split3>
 48c:	a8 f3       	brcs	.-22     	; 0x478 <__mulsf3+0x4>

0000048e <__mulsf3_pse>:
 48e:	99 23       	and	r25, r25
 490:	d9 f3       	breq	.-10     	; 0x488 <__mulsf3+0x14>
 492:	55 23       	and	r21, r21
 494:	c9 f3       	breq	.-14     	; 0x488 <__mulsf3+0x14>
 496:	95 0f       	add	r25, r21
 498:	50 e0       	ldi	r21, 0x00	; 0
 49a:	55 1f       	adc	r21, r21
 49c:	aa 27       	eor	r26, r26
 49e:	ee 27       	eor	r30, r30
 4a0:	ff 27       	eor	r31, r31
 4a2:	bb 27       	eor	r27, r27
 4a4:	00 24       	eor	r0, r0
 4a6:	08 94       	sec
 4a8:	67 95       	ror	r22
 4aa:	20 f4       	brcc	.+8      	; 0x4b4 <__mulsf3_pse+0x26>
 4ac:	e2 0f       	add	r30, r18
 4ae:	f3 1f       	adc	r31, r19
 4b0:	b4 1f       	adc	r27, r20
 4b2:	0a 1e       	adc	r0, r26
 4b4:	22 0f       	add	r18, r18
 4b6:	33 1f       	adc	r19, r19
 4b8:	44 1f       	adc	r20, r20
 4ba:	aa 1f       	adc	r26, r26
 4bc:	66 95       	lsr	r22
 4be:	a9 f7       	brne	.-22     	; 0x4aa <__mulsf3_pse+0x1c>
 4c0:	77 95       	ror	r23
 4c2:	30 f4       	brcc	.+12     	; 0x4d0 <__mulsf3_pse+0x42>
 4c4:	f3 0f       	add	r31, r19
 4c6:	b4 1f       	adc	r27, r20
 4c8:	0a 1e       	adc	r0, r26
 4ca:	12 1e       	adc	r1, r18
 4cc:	08 f4       	brcc	.+2      	; 0x4d0 <__mulsf3_pse+0x42>
 4ce:	63 95       	inc	r22
 4d0:	33 0f       	add	r19, r19
 4d2:	44 1f       	adc	r20, r20
 4d4:	aa 1f       	adc	r26, r26
 4d6:	22 1f       	adc	r18, r18
 4d8:	76 95       	lsr	r23
 4da:	99 f7       	brne	.-26     	; 0x4c2 <__mulsf3_pse+0x34>
 4dc:	87 95       	ror	r24
 4de:	20 f4       	brcc	.+8      	; 0x4e8 <__mulsf3_pse+0x5a>
 4e0:	b4 0f       	add	r27, r20
 4e2:	0a 1e       	adc	r0, r26
 4e4:	12 1e       	adc	r1, r18
 4e6:	63 1f       	adc	r22, r19
 4e8:	44 0f       	add	r20, r20
 4ea:	aa 1f       	adc	r26, r26
 4ec:	22 1f       	adc	r18, r18
 4ee:	33 1f       	adc	r19, r19
 4f0:	86 95       	lsr	r24
 4f2:	a9 f7       	brne	.-22     	; 0x4de <__mulsf3_pse+0x50>
 4f4:	86 2f       	mov	r24, r22
 4f6:	71 2d       	mov	r23, r1
 4f8:	60 2d       	mov	r22, r0
 4fa:	11 24       	eor	r1, r1
 4fc:	9f 57       	subi	r25, 0x7F	; 127
 4fe:	50 40       	sbci	r21, 0x00	; 0
 500:	8a f0       	brmi	.+34     	; 0x524 <__mulsf3_pse+0x96>
 502:	e1 f0       	breq	.+56     	; 0x53c <__mulsf3_pse+0xae>
 504:	88 23       	and	r24, r24
 506:	4a f0       	brmi	.+18     	; 0x51a <__mulsf3_pse+0x8c>
 508:	ee 0f       	add	r30, r30
 50a:	ff 1f       	adc	r31, r31
 50c:	bb 1f       	adc	r27, r27
 50e:	66 1f       	adc	r22, r22
 510:	77 1f       	adc	r23, r23
 512:	88 1f       	adc	r24, r24
 514:	91 50       	subi	r25, 0x01	; 1
 516:	50 40       	sbci	r21, 0x00	; 0
 518:	a9 f7       	brne	.-22     	; 0x504 <__mulsf3_pse+0x76>
 51a:	9e 3f       	cpi	r25, 0xFE	; 254
 51c:	51 05       	cpc	r21, r1
 51e:	70 f0       	brcs	.+28     	; 0x53c <__mulsf3_pse+0xae>
 520:	54 cf       	rjmp	.-344    	; 0x3ca <__fp_inf>
 522:	9e cf       	rjmp	.-196    	; 0x460 <__fp_szero>
 524:	5f 3f       	cpi	r21, 0xFF	; 255
 526:	ec f3       	brlt	.-6      	; 0x522 <__mulsf3_pse+0x94>
 528:	98 3e       	cpi	r25, 0xE8	; 232
 52a:	dc f3       	brlt	.-10     	; 0x522 <__mulsf3_pse+0x94>
 52c:	86 95       	lsr	r24
 52e:	77 95       	ror	r23
 530:	67 95       	ror	r22
 532:	b7 95       	ror	r27
 534:	f7 95       	ror	r31
 536:	e7 95       	ror	r30
 538:	9f 5f       	subi	r25, 0xFF	; 255
 53a:	c1 f7       	brne	.-16     	; 0x52c <__mulsf3_pse+0x9e>
 53c:	fe 2b       	or	r31, r30
 53e:	88 0f       	add	r24, r24
 540:	91 1d       	adc	r25, r1
 542:	96 95       	lsr	r25
 544:	87 95       	ror	r24
 546:	97 f9       	bld	r25, 7
 548:	08 95       	ret

0000054a <__fp_cmp>:
 54a:	99 0f       	add	r25, r25
 54c:	00 08       	sbc	r0, r0
 54e:	55 0f       	add	r21, r21
 550:	aa 0b       	sbc	r26, r26
 552:	e0 e8       	ldi	r30, 0x80	; 128
 554:	fe ef       	ldi	r31, 0xFE	; 254
 556:	16 16       	cp	r1, r22
 558:	17 06       	cpc	r1, r23
 55a:	e8 07       	cpc	r30, r24
 55c:	f9 07       	cpc	r31, r25
 55e:	c0 f0       	brcs	.+48     	; 0x590 <__fp_cmp+0x46>
 560:	12 16       	cp	r1, r18
 562:	13 06       	cpc	r1, r19
 564:	e4 07       	cpc	r30, r20
 566:	f5 07       	cpc	r31, r21
 568:	98 f0       	brcs	.+38     	; 0x590 <__fp_cmp+0x46>
 56a:	62 1b       	sub	r22, r18
 56c:	73 0b       	sbc	r23, r19
 56e:	84 0b       	sbc	r24, r20
 570:	95 0b       	sbc	r25, r21
 572:	39 f4       	brne	.+14     	; 0x582 <__fp_cmp+0x38>
 574:	0a 26       	eor	r0, r26
 576:	61 f0       	breq	.+24     	; 0x590 <__fp_cmp+0x46>
 578:	23 2b       	or	r18, r19
 57a:	24 2b       	or	r18, r20
 57c:	25 2b       	or	r18, r21
 57e:	21 f4       	brne	.+8      	; 0x588 <__fp_cmp+0x3e>
 580:	08 95       	ret
 582:	0a 26       	eor	r0, r26
 584:	09 f4       	brne	.+2      	; 0x588 <__fp_cmp+0x3e>
 586:	a1 40       	sbci	r26, 0x01	; 1
 588:	a6 95       	lsr	r26
 58a:	8f ef       	ldi	r24, 0xFF	; 255
 58c:	81 1d       	adc	r24, r1
 58e:	81 1d       	adc	r24, r1
 590:	08 95       	ret

00000592 <_exit>:
 592:	f8 94       	cli

00000594 <__stop_program>:
 594:	ff cf       	rjmp	.-2      	; 0x594 <__stop_program>
