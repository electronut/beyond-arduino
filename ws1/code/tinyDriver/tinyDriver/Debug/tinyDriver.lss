
tinyDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000590  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  00000604  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000430  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001ab  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001f6  00000000  00000000  00000cab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00000ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000226  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f3  00000000  00000000  000011b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000013a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	b9 c0       	rjmp	.+370    	; 0x178 <__vector_2>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	8a c0       	rjmp	.+276    	; 0x12c <__vector_11>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a5 36       	cpi	r26, 0x65	; 101
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	d5 d0       	rcall	.+426    	; 0x1ea <main>
  40:	a5 c2       	rjmp	.+1354   	; 0x58c <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <motorForward>:
#include <avr/interrupt.h>
#include <util/delay.h>

// GPIO pins HIGH to accelerate
void motorForward(int speed)
{
  44:	9c 01       	movw	r18, r24
	PORTA &= 0x00;
  46:	8b b3       	in	r24, 0x1b	; 27
  48:	1b ba       	out	0x1b, r1	; 27
	// non-inverting mode
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1);
  4a:	9f b5       	in	r25, 0x2f	; 47
  4c:	90 6a       	ori	r25, 0xA0	; 160
  4e:	9f bd       	out	0x2f, r25	; 47
	PORTA |= 1<<PA7;
  50:	df 9a       	sbi	0x1b, 7	; 27
	PORTB |= 1<<PB2;
  52:	c2 9a       	sbi	0x18, 2	; 24
	OCR1A = OCR1B = speed;
  54:	39 bd       	out	0x29, r19	; 41
  56:	28 bd       	out	0x28, r18	; 40
  58:	3b bd       	out	0x2b, r19	; 43
  5a:	2a bd       	out	0x2a, r18	; 42
	PORTA |= 1<<PA2;
  5c:	da 9a       	sbi	0x1b, 2	; 27
  5e:	08 95       	ret

00000060 <motorReverse>:
}

//GPIO pins low to reverse 
void motorReverse(int speed)
{
  60:	9c 01       	movw	r18, r24
	PORTA &= 0x00;
  62:	8b b3       	in	r24, 0x1b	; 27
  64:	1b ba       	out	0x1b, r1	; 27
	// non-inverting mode
    TCCR1A |= (1<<COM1A1)|(1<<COM1B1);
  66:	9f b5       	in	r25, 0x2f	; 47
  68:	90 6a       	ori	r25, 0xA0	; 160
  6a:	9f bd       	out	0x2f, r25	; 47
	PORTA &= ~(1<<PA7);
  6c:	df 98       	cbi	0x1b, 7	; 27
	PORTB &= ~(1<<PB2);
  6e:	c2 98       	cbi	0x18, 2	; 24
	OCR1A = OCR1B = speed;	
  70:	39 bd       	out	0x29, r19	; 41
  72:	28 bd       	out	0x28, r18	; 40
  74:	3b bd       	out	0x2b, r19	; 43
  76:	2a bd       	out	0x2a, r18	; 42
	PORTA |= 1<<PA3;
  78:	db 9a       	sbi	0x1b, 3	; 27
  7a:	08 95       	ret

0000007c <motorRight>:
	PORTA |= ((1<<PA2)|(1<<PA3));
}

// turn right
void motorRight(int speed)
{
  7c:	9c 01       	movw	r18, r24
	PORTA &= 0x00;
  7e:	8b b3       	in	r24, 0x1b	; 27
  80:	1b ba       	out	0x1b, r1	; 27
	// non-inverting mode
	// left motor on, right motor off
	
	TCCR1A |= 1<<COM1A1;
  82:	9f b5       	in	r25, 0x2f	; 47
  84:	90 68       	ori	r25, 0x80	; 128
  86:	9f bd       	out	0x2f, r25	; 47
	TCCR1A &= ~(1<<COM1B1);
  88:	9f b5       	in	r25, 0x2f	; 47
  8a:	9f 7d       	andi	r25, 0xDF	; 223
  8c:	9f bd       	out	0x2f, r25	; 47
	PORTA |= 1<<PA7;
  8e:	df 9a       	sbi	0x1b, 7	; 27
	OCR1A = speed;
  90:	3b bd       	out	0x2b, r19	; 43
  92:	2a bd       	out	0x2a, r18	; 42
	PORTA |= ((1<<PA1)|(1<<PA2));
  94:	8b b3       	in	r24, 0x1b	; 27
  96:	86 60       	ori	r24, 0x06	; 6
  98:	8b bb       	out	0x1b, r24	; 27
  9a:	08 95       	ret

0000009c <motorStop>:
}

// turn off PWM o/p channels to stop
void motorStop()
{
	PORTA &= 0x00;
  9c:	8b b3       	in	r24, 0x1b	; 27
  9e:	1b ba       	out	0x1b, r1	; 27
	TCCR1A &= ~((1<<COM1A1)|(1<<COM1B1));
  a0:	8f b5       	in	r24, 0x2f	; 47
  a2:	8f 75       	andi	r24, 0x5F	; 95
  a4:	8f bd       	out	0x2f, r24	; 47
	PORTA |= 1<<PA1;
  a6:	d9 9a       	sbi	0x1b, 1	; 27
  a8:	08 95       	ret

000000aa <getDistance>:
//begin HCSR04
float getDistance()
{
	float distance = 0.0;
	
	cli();
  aa:	f8 94       	cli
	
	// interrupt enable
	GIMSK |= 1<<PCIE0;
  ac:	8b b7       	in	r24, 0x3b	; 59
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	8b bf       	out	0x3b, r24	; 59
	// enable pin
	PCMSK0 |= 1<<PCINT0;
  b2:	90 9a       	sbi	0x12, 0	; 18
	
	sei();
  b4:	78 94       	sei
	
	// reset echo flag
	echoDone = 0;
  b6:	10 92 64 00 	sts	0x0064, r1
	// reset counter
	countTimer0 = 0;
  ba:	10 92 60 00 	sts	0x0060, r1
  be:	10 92 61 00 	sts	0x0061, r1
  c2:	10 92 62 00 	sts	0x0062, r1
  c6:	10 92 63 00 	sts	0x0063, r1
	
	// send 10us trigger pulse
	
	PORTB &= ~(1<<PB0);
  ca:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	8f e3       	ldi	r24, 0x3F	; 63
  ce:	9c e9       	ldi	r25, 0x9C	; 156
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <getDistance+0x26>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <getDistance+0x2c>
  d6:	00 00       	nop
	_delay_ms(20);
	PORTB |= (1<<PB0);
  d8:	c0 9a       	sbi	0x18, 0	; 24
  da:	8f eb       	ldi	r24, 0xBF	; 191
  dc:	9d e5       	ldi	r25, 0x5D	; 93
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <getDistance+0x34>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <getDistance+0x3a>
  e4:	00 00       	nop
	_delay_ms(12);
	PORTB &= ~(1<<PB0);
  e6:	c0 98       	cbi	0x18, 0	; 24
  e8:	8f e3       	ldi	r24, 0x3F	; 63
  ea:	9c e9       	ldi	r25, 0x9C	; 156
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <getDistance+0x42>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <getDistance+0x48>
  f2:	00 00       	nop
	_delay_ms(20);
	
	// listen for echo
	while(!echoDone);
  f4:	80 91 64 00 	lds	r24, 0x0064
  f8:	88 23       	and	r24, r24
  fa:	e1 f3       	breq	.-8      	; 0xf4 <getDistance+0x4a>
	
	// disable interrupt
	GIMSK &= ~(1<<PCIE0);
  fc:	8b b7       	in	r24, 0x3b	; 59
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	8b bf       	out	0x3b, r24	; 59
	// disable pin
	PCMSK0 &= ~(1<<PCINT0);
 102:	90 98       	cbi	0x12, 0	; 18

	// calculate duration
	float duration = countTimer0/8000000.0;
 104:	60 91 60 00 	lds	r22, 0x0060
 108:	70 91 61 00 	lds	r23, 0x0061
 10c:	80 91 62 00 	lds	r24, 0x0062
 110:	90 91 63 00 	lds	r25, 0x0063
 114:	1a d1       	rcall	.+564    	; 0x34a <__floatunsisf>
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	34 e2       	ldi	r19, 0x24	; 36
 11a:	44 ef       	ldi	r20, 0xF4	; 244
 11c:	5a e4       	ldi	r21, 0x4A	; 74
 11e:	ad d0       	rcall	.+346    	; 0x27a <__divsf3>
	
	// distance = duration * speed of sound * 0.5;
	// distance(in cms) = duration * 340.26 * 0.5 * 100
	// distance = 17013 * duration
	distance = 17013.0 * duration;
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	3a ee       	ldi	r19, 0xEA	; 234
 124:	44 e8       	ldi	r20, 0x84	; 132
 126:	56 e4       	ldi	r21, 0x46	; 70
 128:	a2 d1       	rcall	.+836    	; 0x46e <__mulsf3>
	
	return distance;	
}
 12a:	08 95       	ret

0000012c <__vector_11>:

// timer overflow handler
ISR(TIM0_OVF_vect)
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
	countTimer0 += 255;
 13e:	80 91 60 00 	lds	r24, 0x0060
 142:	90 91 61 00 	lds	r25, 0x0061
 146:	a0 91 62 00 	lds	r26, 0x0062
 14a:	b0 91 63 00 	lds	r27, 0x0063
 14e:	81 50       	subi	r24, 0x01	; 1
 150:	9f 4f       	sbci	r25, 0xFF	; 255
 152:	af 4f       	sbci	r26, 0xFF	; 255
 154:	bf 4f       	sbci	r27, 0xFF	; 255
 156:	80 93 60 00 	sts	0x0060, r24
 15a:	90 93 61 00 	sts	0x0061, r25
 15e:	a0 93 62 00 	sts	0x0062, r26
 162:	b0 93 63 00 	sts	0x0063, r27
}
 166:	bf 91       	pop	r27
 168:	af 91       	pop	r26
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <__vector_2>:


//pin-change interrupt handler
ISR(PCINT0_vect)
{
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	2f 93       	push	r18
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	af 93       	push	r26
 18a:	bf 93       	push	r27
	// read PCINT0
	if (PINA & (1<<PA0))
 18c:	c8 9b       	sbis	0x19, 0	; 25
 18e:	07 c0       	rjmp	.+14     	; 0x19e <__vector_2+0x26>
	{
		//start 16 bit timer
		// Divide by 1 - prescalar
		TCCR0B |= 1<<CS00;
 190:	83 b7       	in	r24, 0x33	; 51
 192:	81 60       	ori	r24, 0x01	; 1
 194:	83 bf       	out	0x33, r24	; 51
		// set interrupt overflow flag
		TIMSK0 |= 1<<TOIE0;
 196:	89 b7       	in	r24, 0x39	; 57
 198:	81 60       	ori	r24, 0x01	; 1
 19a:	89 bf       	out	0x39, r24	; 57
 19c:	1c c0       	rjmp	.+56     	; 0x1d6 <__vector_2+0x5e>
	}
	else
	{
		// stop timer
		TCCR0B &= ~(1<<CS00);
 19e:	83 b7       	in	r24, 0x33	; 51
 1a0:	8e 7f       	andi	r24, 0xFE	; 254
 1a2:	83 bf       	out	0x33, r24	; 51
		// calculate time elapsed
		countTimer0 += TCNT0;
 1a4:	22 b7       	in	r18, 0x32	; 50
 1a6:	80 91 60 00 	lds	r24, 0x0060
 1aa:	90 91 61 00 	lds	r25, 0x0061
 1ae:	a0 91 62 00 	lds	r26, 0x0062
 1b2:	b0 91 63 00 	lds	r27, 0x0063
 1b6:	82 0f       	add	r24, r18
 1b8:	91 1d       	adc	r25, r1
 1ba:	a1 1d       	adc	r26, r1
 1bc:	b1 1d       	adc	r27, r1
 1be:	80 93 60 00 	sts	0x0060, r24
 1c2:	90 93 61 00 	sts	0x0061, r25
 1c6:	a0 93 62 00 	sts	0x0062, r26
 1ca:	b0 93 63 00 	sts	0x0063, r27
		// reset counter - TCNT0
		TCNT0 = 0;
 1ce:	12 be       	out	0x32, r1	; 50
		// set flag
		echoDone = 1;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 64 00 	sts	0x0064, r24
	}
}
 1d6:	bf 91       	pop	r27
 1d8:	af 91       	pop	r26
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	2f 91       	pop	r18
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <main>:
	// pin set-up
	
	// PB0 - trigger
	// PB2 - GPIO for motor 2
	// PB1 - mode pin HIGH for phase enable in motor driver
	DDRB |= (1<<PB2)|(1<<PB1)|(1<<PB0);
 1ea:	87 b3       	in	r24, 0x17	; 23
 1ec:	87 60       	ori	r24, 0x07	; 7
 1ee:	87 bb       	out	0x17, r24	; 23
	
	// PA1, PA2, PA3 = R,G,B leads of the LED
	// PA6, PA5 = OC1A, OC1B - PWM
	// PA7 = GPIO for motor 1, 
	DDRA |= (1<<PA7)|(1<<PA6)|(1<<PA5)|(1<<PA1)|(1<<PA2)|(1<<PA3);
 1f0:	8a b3       	in	r24, 0x1a	; 26
 1f2:	8e 6e       	ori	r24, 0xEE	; 238
 1f4:	8a bb       	out	0x1a, r24	; 26
	
	// Pull-up mode for PA0 - echo pin
	PORTB |= 1<<PB1;
 1f6:	c1 9a       	sbi	0x18, 1	; 24
	
	// TIMER0 PWM configurations
	// Phase Correct PWM, TOP = 0xFF
    TCCR1A |= (1<<WGM10);
 1f8:	8f b5       	in	r24, 0x2f	; 47
 1fa:	81 60       	ori	r24, 0x01	; 1
 1fc:	8f bd       	out	0x2f, r24	; 47
	// CLK/8 pre-scalar for 2KHz motor frequency
	TCCR1B |= 1<<CS11;
 1fe:	8e b5       	in	r24, 0x2e	; 46
 200:	82 60       	ori	r24, 0x02	; 2
 202:	8e bd       	out	0x2e, r24	; 46
	// register clear while in PWM mode
	TCCR1C = 0x00;
 204:	12 bc       	out	0x22, r1	; 34
	
	float prevDist = 0.0;	
	while (1) 
    {	
		float dist = getDistance();
 206:	51 df       	rcall	.-350    	; 0xaa <getDistance>
 208:	6b 01       	movw	r12, r22
 20a:	7c 01       	movw	r14, r24
		if(dist>400)
 20c:	20 e0       	ldi	r18, 0x00	; 0
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	48 ec       	ldi	r20, 0xC8	; 200
 212:	53 e4       	ldi	r21, 0x43	; 67
 214:	28 d1       	rcall	.+592    	; 0x466 <__gesf2>
 216:	18 16       	cp	r1, r24
 218:	6c f0       	brlt	.+26     	; 0x234 <main+0x4a>
		{
			dist = prevDist;
		}
	// prevDist = dist;
		if(dist>=10)
 21a:	20 e0       	ldi	r18, 0x00	; 0
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	40 e2       	ldi	r20, 0x20	; 32
 220:	51 e4       	ldi	r21, 0x41	; 65
 222:	c7 01       	movw	r24, r14
 224:	b6 01       	movw	r22, r12
 226:	1f d1       	rcall	.+574    	; 0x466 <__gesf2>
 228:	88 23       	and	r24, r24
 22a:	24 f0       	brlt	.+8      	; 0x234 <main+0x4a>
		{
		// no obstacle detected
		// move forward
			motorForward(150);	
 22c:	86 e9       	ldi	r24, 0x96	; 150
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	09 df       	rcall	.-494    	; 0x44 <motorForward>
 232:	e9 cf       	rjmp	.-46     	; 0x206 <main+0x1c>
		}
		else
		{
		// stop
			motorStop();
 234:	33 df       	rcall	.-410    	; 0x9c <motorStop>
 236:	2f ef       	ldi	r18, 0xFF	; 255
 238:	89 e6       	ldi	r24, 0x69	; 105
 23a:	98 e1       	ldi	r25, 0x18	; 24
 23c:	21 50       	subi	r18, 0x01	; 1
 23e:	80 40       	sbci	r24, 0x00	; 0
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <main+0x52>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0x5c>
 246:	00 00       	nop
			_delay_ms(1000);
		
		// reverse
			motorReverse(150);
 248:	86 e9       	ldi	r24, 0x96	; 150
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	09 df       	rcall	.-494    	; 0x60 <motorReverse>
 24e:	2f ef       	ldi	r18, 0xFF	; 255
 250:	83 ed       	ldi	r24, 0xD3	; 211
 252:	90 e3       	ldi	r25, 0x30	; 48
 254:	21 50       	subi	r18, 0x01	; 1
 256:	80 40       	sbci	r24, 0x00	; 0
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <main+0x6a>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x74>
 25e:	00 00       	nop
			_delay_ms(2000);
		
		// right turn
			motorRight(150);
 260:	86 e9       	ldi	r24, 0x96	; 150
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0b df       	rcall	.-490    	; 0x7c <motorRight>
 266:	2f ef       	ldi	r18, 0xFF	; 255
 268:	89 e6       	ldi	r24, 0x69	; 105
 26a:	98 e1       	ldi	r25, 0x18	; 24
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <__stack+0xd>
 274:	00 c0       	rjmp	.+0      	; 0x276 <__stack+0x17>
 276:	00 00       	nop
 278:	c6 cf       	rjmp	.-116    	; 0x206 <main+0x1c>

0000027a <__divsf3>:
 27a:	0c d0       	rcall	.+24     	; 0x294 <__divsf3x>
 27c:	ba c0       	rjmp	.+372    	; 0x3f2 <__fp_round>
 27e:	b2 d0       	rcall	.+356    	; 0x3e4 <__fp_pscB>
 280:	40 f0       	brcs	.+16     	; 0x292 <__divsf3+0x18>
 282:	a9 d0       	rcall	.+338    	; 0x3d6 <__fp_pscA>
 284:	30 f0       	brcs	.+12     	; 0x292 <__divsf3+0x18>
 286:	21 f4       	brne	.+8      	; 0x290 <__divsf3+0x16>
 288:	5f 3f       	cpi	r21, 0xFF	; 255
 28a:	19 f0       	breq	.+6      	; 0x292 <__divsf3+0x18>
 28c:	9b c0       	rjmp	.+310    	; 0x3c4 <__fp_inf>
 28e:	51 11       	cpse	r21, r1
 290:	e4 c0       	rjmp	.+456    	; 0x45a <__fp_szero>
 292:	9e c0       	rjmp	.+316    	; 0x3d0 <__fp_nan>

00000294 <__divsf3x>:
 294:	bf d0       	rcall	.+382    	; 0x414 <__fp_split3>
 296:	98 f3       	brcs	.-26     	; 0x27e <__divsf3+0x4>

00000298 <__divsf3_pse>:
 298:	99 23       	and	r25, r25
 29a:	c9 f3       	breq	.-14     	; 0x28e <__divsf3+0x14>
 29c:	55 23       	and	r21, r21
 29e:	b1 f3       	breq	.-20     	; 0x28c <__divsf3+0x12>
 2a0:	95 1b       	sub	r25, r21
 2a2:	55 0b       	sbc	r21, r21
 2a4:	bb 27       	eor	r27, r27
 2a6:	aa 27       	eor	r26, r26
 2a8:	62 17       	cp	r22, r18
 2aa:	73 07       	cpc	r23, r19
 2ac:	84 07       	cpc	r24, r20
 2ae:	38 f0       	brcs	.+14     	; 0x2be <__divsf3_pse+0x26>
 2b0:	9f 5f       	subi	r25, 0xFF	; 255
 2b2:	5f 4f       	sbci	r21, 0xFF	; 255
 2b4:	22 0f       	add	r18, r18
 2b6:	33 1f       	adc	r19, r19
 2b8:	44 1f       	adc	r20, r20
 2ba:	aa 1f       	adc	r26, r26
 2bc:	a9 f3       	breq	.-22     	; 0x2a8 <__divsf3_pse+0x10>
 2be:	33 d0       	rcall	.+102    	; 0x326 <__divsf3_pse+0x8e>
 2c0:	0e 2e       	mov	r0, r30
 2c2:	3a f0       	brmi	.+14     	; 0x2d2 <__divsf3_pse+0x3a>
 2c4:	e0 e8       	ldi	r30, 0x80	; 128
 2c6:	30 d0       	rcall	.+96     	; 0x328 <__divsf3_pse+0x90>
 2c8:	91 50       	subi	r25, 0x01	; 1
 2ca:	50 40       	sbci	r21, 0x00	; 0
 2cc:	e6 95       	lsr	r30
 2ce:	00 1c       	adc	r0, r0
 2d0:	ca f7       	brpl	.-14     	; 0x2c4 <__divsf3_pse+0x2c>
 2d2:	29 d0       	rcall	.+82     	; 0x326 <__divsf3_pse+0x8e>
 2d4:	fe 2f       	mov	r31, r30
 2d6:	27 d0       	rcall	.+78     	; 0x326 <__divsf3_pse+0x8e>
 2d8:	66 0f       	add	r22, r22
 2da:	77 1f       	adc	r23, r23
 2dc:	88 1f       	adc	r24, r24
 2de:	bb 1f       	adc	r27, r27
 2e0:	26 17       	cp	r18, r22
 2e2:	37 07       	cpc	r19, r23
 2e4:	48 07       	cpc	r20, r24
 2e6:	ab 07       	cpc	r26, r27
 2e8:	b0 e8       	ldi	r27, 0x80	; 128
 2ea:	09 f0       	breq	.+2      	; 0x2ee <__divsf3_pse+0x56>
 2ec:	bb 0b       	sbc	r27, r27
 2ee:	80 2d       	mov	r24, r0
 2f0:	bf 01       	movw	r22, r30
 2f2:	ff 27       	eor	r31, r31
 2f4:	93 58       	subi	r25, 0x83	; 131
 2f6:	5f 4f       	sbci	r21, 0xFF	; 255
 2f8:	2a f0       	brmi	.+10     	; 0x304 <__divsf3_pse+0x6c>
 2fa:	9e 3f       	cpi	r25, 0xFE	; 254
 2fc:	51 05       	cpc	r21, r1
 2fe:	68 f0       	brcs	.+26     	; 0x31a <__divsf3_pse+0x82>
 300:	61 c0       	rjmp	.+194    	; 0x3c4 <__fp_inf>
 302:	ab c0       	rjmp	.+342    	; 0x45a <__fp_szero>
 304:	5f 3f       	cpi	r21, 0xFF	; 255
 306:	ec f3       	brlt	.-6      	; 0x302 <__divsf3_pse+0x6a>
 308:	98 3e       	cpi	r25, 0xE8	; 232
 30a:	dc f3       	brlt	.-10     	; 0x302 <__divsf3_pse+0x6a>
 30c:	86 95       	lsr	r24
 30e:	77 95       	ror	r23
 310:	67 95       	ror	r22
 312:	b7 95       	ror	r27
 314:	f7 95       	ror	r31
 316:	9f 5f       	subi	r25, 0xFF	; 255
 318:	c9 f7       	brne	.-14     	; 0x30c <__divsf3_pse+0x74>
 31a:	88 0f       	add	r24, r24
 31c:	91 1d       	adc	r25, r1
 31e:	96 95       	lsr	r25
 320:	87 95       	ror	r24
 322:	97 f9       	bld	r25, 7
 324:	08 95       	ret
 326:	e1 e0       	ldi	r30, 0x01	; 1
 328:	66 0f       	add	r22, r22
 32a:	77 1f       	adc	r23, r23
 32c:	88 1f       	adc	r24, r24
 32e:	bb 1f       	adc	r27, r27
 330:	62 17       	cp	r22, r18
 332:	73 07       	cpc	r23, r19
 334:	84 07       	cpc	r24, r20
 336:	ba 07       	cpc	r27, r26
 338:	20 f0       	brcs	.+8      	; 0x342 <__divsf3_pse+0xaa>
 33a:	62 1b       	sub	r22, r18
 33c:	73 0b       	sbc	r23, r19
 33e:	84 0b       	sbc	r24, r20
 340:	ba 0b       	sbc	r27, r26
 342:	ee 1f       	adc	r30, r30
 344:	88 f7       	brcc	.-30     	; 0x328 <__divsf3_pse+0x90>
 346:	e0 95       	com	r30
 348:	08 95       	ret

0000034a <__floatunsisf>:
 34a:	e8 94       	clt
 34c:	09 c0       	rjmp	.+18     	; 0x360 <__floatsisf+0x12>

0000034e <__floatsisf>:
 34e:	97 fb       	bst	r25, 7
 350:	3e f4       	brtc	.+14     	; 0x360 <__floatsisf+0x12>
 352:	90 95       	com	r25
 354:	80 95       	com	r24
 356:	70 95       	com	r23
 358:	61 95       	neg	r22
 35a:	7f 4f       	sbci	r23, 0xFF	; 255
 35c:	8f 4f       	sbci	r24, 0xFF	; 255
 35e:	9f 4f       	sbci	r25, 0xFF	; 255
 360:	99 23       	and	r25, r25
 362:	a9 f0       	breq	.+42     	; 0x38e <__floatsisf+0x40>
 364:	f9 2f       	mov	r31, r25
 366:	96 e9       	ldi	r25, 0x96	; 150
 368:	bb 27       	eor	r27, r27
 36a:	93 95       	inc	r25
 36c:	f6 95       	lsr	r31
 36e:	87 95       	ror	r24
 370:	77 95       	ror	r23
 372:	67 95       	ror	r22
 374:	b7 95       	ror	r27
 376:	f1 11       	cpse	r31, r1
 378:	f8 cf       	rjmp	.-16     	; 0x36a <__floatsisf+0x1c>
 37a:	fa f4       	brpl	.+62     	; 0x3ba <__floatsisf+0x6c>
 37c:	bb 0f       	add	r27, r27
 37e:	11 f4       	brne	.+4      	; 0x384 <__floatsisf+0x36>
 380:	60 ff       	sbrs	r22, 0
 382:	1b c0       	rjmp	.+54     	; 0x3ba <__floatsisf+0x6c>
 384:	6f 5f       	subi	r22, 0xFF	; 255
 386:	7f 4f       	sbci	r23, 0xFF	; 255
 388:	8f 4f       	sbci	r24, 0xFF	; 255
 38a:	9f 4f       	sbci	r25, 0xFF	; 255
 38c:	16 c0       	rjmp	.+44     	; 0x3ba <__floatsisf+0x6c>
 38e:	88 23       	and	r24, r24
 390:	11 f0       	breq	.+4      	; 0x396 <__floatsisf+0x48>
 392:	96 e9       	ldi	r25, 0x96	; 150
 394:	11 c0       	rjmp	.+34     	; 0x3b8 <__floatsisf+0x6a>
 396:	77 23       	and	r23, r23
 398:	21 f0       	breq	.+8      	; 0x3a2 <__floatsisf+0x54>
 39a:	9e e8       	ldi	r25, 0x8E	; 142
 39c:	87 2f       	mov	r24, r23
 39e:	76 2f       	mov	r23, r22
 3a0:	05 c0       	rjmp	.+10     	; 0x3ac <__floatsisf+0x5e>
 3a2:	66 23       	and	r22, r22
 3a4:	71 f0       	breq	.+28     	; 0x3c2 <__floatsisf+0x74>
 3a6:	96 e8       	ldi	r25, 0x86	; 134
 3a8:	86 2f       	mov	r24, r22
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	2a f0       	brmi	.+10     	; 0x3ba <__floatsisf+0x6c>
 3b0:	9a 95       	dec	r25
 3b2:	66 0f       	add	r22, r22
 3b4:	77 1f       	adc	r23, r23
 3b6:	88 1f       	adc	r24, r24
 3b8:	da f7       	brpl	.-10     	; 0x3b0 <__floatsisf+0x62>
 3ba:	88 0f       	add	r24, r24
 3bc:	96 95       	lsr	r25
 3be:	87 95       	ror	r24
 3c0:	97 f9       	bld	r25, 7
 3c2:	08 95       	ret

000003c4 <__fp_inf>:
 3c4:	97 f9       	bld	r25, 7
 3c6:	9f 67       	ori	r25, 0x7F	; 127
 3c8:	80 e8       	ldi	r24, 0x80	; 128
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	08 95       	ret

000003d0 <__fp_nan>:
 3d0:	9f ef       	ldi	r25, 0xFF	; 255
 3d2:	80 ec       	ldi	r24, 0xC0	; 192
 3d4:	08 95       	ret

000003d6 <__fp_pscA>:
 3d6:	00 24       	eor	r0, r0
 3d8:	0a 94       	dec	r0
 3da:	16 16       	cp	r1, r22
 3dc:	17 06       	cpc	r1, r23
 3de:	18 06       	cpc	r1, r24
 3e0:	09 06       	cpc	r0, r25
 3e2:	08 95       	ret

000003e4 <__fp_pscB>:
 3e4:	00 24       	eor	r0, r0
 3e6:	0a 94       	dec	r0
 3e8:	12 16       	cp	r1, r18
 3ea:	13 06       	cpc	r1, r19
 3ec:	14 06       	cpc	r1, r20
 3ee:	05 06       	cpc	r0, r21
 3f0:	08 95       	ret

000003f2 <__fp_round>:
 3f2:	09 2e       	mov	r0, r25
 3f4:	03 94       	inc	r0
 3f6:	00 0c       	add	r0, r0
 3f8:	11 f4       	brne	.+4      	; 0x3fe <__fp_round+0xc>
 3fa:	88 23       	and	r24, r24
 3fc:	52 f0       	brmi	.+20     	; 0x412 <__fp_round+0x20>
 3fe:	bb 0f       	add	r27, r27
 400:	40 f4       	brcc	.+16     	; 0x412 <__fp_round+0x20>
 402:	bf 2b       	or	r27, r31
 404:	11 f4       	brne	.+4      	; 0x40a <__fp_round+0x18>
 406:	60 ff       	sbrs	r22, 0
 408:	04 c0       	rjmp	.+8      	; 0x412 <__fp_round+0x20>
 40a:	6f 5f       	subi	r22, 0xFF	; 255
 40c:	7f 4f       	sbci	r23, 0xFF	; 255
 40e:	8f 4f       	sbci	r24, 0xFF	; 255
 410:	9f 4f       	sbci	r25, 0xFF	; 255
 412:	08 95       	ret

00000414 <__fp_split3>:
 414:	57 fd       	sbrc	r21, 7
 416:	90 58       	subi	r25, 0x80	; 128
 418:	44 0f       	add	r20, r20
 41a:	55 1f       	adc	r21, r21
 41c:	59 f0       	breq	.+22     	; 0x434 <__fp_splitA+0x10>
 41e:	5f 3f       	cpi	r21, 0xFF	; 255
 420:	71 f0       	breq	.+28     	; 0x43e <__fp_splitA+0x1a>
 422:	47 95       	ror	r20

00000424 <__fp_splitA>:
 424:	88 0f       	add	r24, r24
 426:	97 fb       	bst	r25, 7
 428:	99 1f       	adc	r25, r25
 42a:	61 f0       	breq	.+24     	; 0x444 <__fp_splitA+0x20>
 42c:	9f 3f       	cpi	r25, 0xFF	; 255
 42e:	79 f0       	breq	.+30     	; 0x44e <__fp_splitA+0x2a>
 430:	87 95       	ror	r24
 432:	08 95       	ret
 434:	12 16       	cp	r1, r18
 436:	13 06       	cpc	r1, r19
 438:	14 06       	cpc	r1, r20
 43a:	55 1f       	adc	r21, r21
 43c:	f2 cf       	rjmp	.-28     	; 0x422 <__fp_split3+0xe>
 43e:	46 95       	lsr	r20
 440:	f1 df       	rcall	.-30     	; 0x424 <__fp_splitA>
 442:	08 c0       	rjmp	.+16     	; 0x454 <__fp_splitA+0x30>
 444:	16 16       	cp	r1, r22
 446:	17 06       	cpc	r1, r23
 448:	18 06       	cpc	r1, r24
 44a:	99 1f       	adc	r25, r25
 44c:	f1 cf       	rjmp	.-30     	; 0x430 <__fp_splitA+0xc>
 44e:	86 95       	lsr	r24
 450:	71 05       	cpc	r23, r1
 452:	61 05       	cpc	r22, r1
 454:	08 94       	sec
 456:	08 95       	ret

00000458 <__fp_zero>:
 458:	e8 94       	clt

0000045a <__fp_szero>:
 45a:	bb 27       	eor	r27, r27
 45c:	66 27       	eor	r22, r22
 45e:	77 27       	eor	r23, r23
 460:	cb 01       	movw	r24, r22
 462:	97 f9       	bld	r25, 7
 464:	08 95       	ret

00000466 <__gesf2>:
 466:	6e d0       	rcall	.+220    	; 0x544 <__fp_cmp>
 468:	08 f4       	brcc	.+2      	; 0x46c <__gesf2+0x6>
 46a:	8f ef       	ldi	r24, 0xFF	; 255
 46c:	08 95       	ret

0000046e <__mulsf3>:
 46e:	0a d0       	rcall	.+20     	; 0x484 <__mulsf3x>
 470:	c0 cf       	rjmp	.-128    	; 0x3f2 <__fp_round>
 472:	b1 df       	rcall	.-158    	; 0x3d6 <__fp_pscA>
 474:	28 f0       	brcs	.+10     	; 0x480 <__mulsf3+0x12>
 476:	b6 df       	rcall	.-148    	; 0x3e4 <__fp_pscB>
 478:	18 f0       	brcs	.+6      	; 0x480 <__mulsf3+0x12>
 47a:	95 23       	and	r25, r21
 47c:	09 f0       	breq	.+2      	; 0x480 <__mulsf3+0x12>
 47e:	a2 cf       	rjmp	.-188    	; 0x3c4 <__fp_inf>
 480:	a7 cf       	rjmp	.-178    	; 0x3d0 <__fp_nan>
 482:	eb cf       	rjmp	.-42     	; 0x45a <__fp_szero>

00000484 <__mulsf3x>:
 484:	c7 df       	rcall	.-114    	; 0x414 <__fp_split3>
 486:	a8 f3       	brcs	.-22     	; 0x472 <__mulsf3+0x4>

00000488 <__mulsf3_pse>:
 488:	99 23       	and	r25, r25
 48a:	d9 f3       	breq	.-10     	; 0x482 <__mulsf3+0x14>
 48c:	55 23       	and	r21, r21
 48e:	c9 f3       	breq	.-14     	; 0x482 <__mulsf3+0x14>
 490:	95 0f       	add	r25, r21
 492:	50 e0       	ldi	r21, 0x00	; 0
 494:	55 1f       	adc	r21, r21
 496:	aa 27       	eor	r26, r26
 498:	ee 27       	eor	r30, r30
 49a:	ff 27       	eor	r31, r31
 49c:	bb 27       	eor	r27, r27
 49e:	00 24       	eor	r0, r0
 4a0:	08 94       	sec
 4a2:	67 95       	ror	r22
 4a4:	20 f4       	brcc	.+8      	; 0x4ae <__mulsf3_pse+0x26>
 4a6:	e2 0f       	add	r30, r18
 4a8:	f3 1f       	adc	r31, r19
 4aa:	b4 1f       	adc	r27, r20
 4ac:	0a 1e       	adc	r0, r26
 4ae:	22 0f       	add	r18, r18
 4b0:	33 1f       	adc	r19, r19
 4b2:	44 1f       	adc	r20, r20
 4b4:	aa 1f       	adc	r26, r26
 4b6:	66 95       	lsr	r22
 4b8:	a9 f7       	brne	.-22     	; 0x4a4 <__mulsf3_pse+0x1c>
 4ba:	77 95       	ror	r23
 4bc:	30 f4       	brcc	.+12     	; 0x4ca <__mulsf3_pse+0x42>
 4be:	f3 0f       	add	r31, r19
 4c0:	b4 1f       	adc	r27, r20
 4c2:	0a 1e       	adc	r0, r26
 4c4:	12 1e       	adc	r1, r18
 4c6:	08 f4       	brcc	.+2      	; 0x4ca <__mulsf3_pse+0x42>
 4c8:	63 95       	inc	r22
 4ca:	33 0f       	add	r19, r19
 4cc:	44 1f       	adc	r20, r20
 4ce:	aa 1f       	adc	r26, r26
 4d0:	22 1f       	adc	r18, r18
 4d2:	76 95       	lsr	r23
 4d4:	99 f7       	brne	.-26     	; 0x4bc <__mulsf3_pse+0x34>
 4d6:	87 95       	ror	r24
 4d8:	20 f4       	brcc	.+8      	; 0x4e2 <__mulsf3_pse+0x5a>
 4da:	b4 0f       	add	r27, r20
 4dc:	0a 1e       	adc	r0, r26
 4de:	12 1e       	adc	r1, r18
 4e0:	63 1f       	adc	r22, r19
 4e2:	44 0f       	add	r20, r20
 4e4:	aa 1f       	adc	r26, r26
 4e6:	22 1f       	adc	r18, r18
 4e8:	33 1f       	adc	r19, r19
 4ea:	86 95       	lsr	r24
 4ec:	a9 f7       	brne	.-22     	; 0x4d8 <__mulsf3_pse+0x50>
 4ee:	86 2f       	mov	r24, r22
 4f0:	71 2d       	mov	r23, r1
 4f2:	60 2d       	mov	r22, r0
 4f4:	11 24       	eor	r1, r1
 4f6:	9f 57       	subi	r25, 0x7F	; 127
 4f8:	50 40       	sbci	r21, 0x00	; 0
 4fa:	8a f0       	brmi	.+34     	; 0x51e <__mulsf3_pse+0x96>
 4fc:	e1 f0       	breq	.+56     	; 0x536 <__mulsf3_pse+0xae>
 4fe:	88 23       	and	r24, r24
 500:	4a f0       	brmi	.+18     	; 0x514 <__mulsf3_pse+0x8c>
 502:	ee 0f       	add	r30, r30
 504:	ff 1f       	adc	r31, r31
 506:	bb 1f       	adc	r27, r27
 508:	66 1f       	adc	r22, r22
 50a:	77 1f       	adc	r23, r23
 50c:	88 1f       	adc	r24, r24
 50e:	91 50       	subi	r25, 0x01	; 1
 510:	50 40       	sbci	r21, 0x00	; 0
 512:	a9 f7       	brne	.-22     	; 0x4fe <__mulsf3_pse+0x76>
 514:	9e 3f       	cpi	r25, 0xFE	; 254
 516:	51 05       	cpc	r21, r1
 518:	70 f0       	brcs	.+28     	; 0x536 <__mulsf3_pse+0xae>
 51a:	54 cf       	rjmp	.-344    	; 0x3c4 <__fp_inf>
 51c:	9e cf       	rjmp	.-196    	; 0x45a <__fp_szero>
 51e:	5f 3f       	cpi	r21, 0xFF	; 255
 520:	ec f3       	brlt	.-6      	; 0x51c <__mulsf3_pse+0x94>
 522:	98 3e       	cpi	r25, 0xE8	; 232
 524:	dc f3       	brlt	.-10     	; 0x51c <__mulsf3_pse+0x94>
 526:	86 95       	lsr	r24
 528:	77 95       	ror	r23
 52a:	67 95       	ror	r22
 52c:	b7 95       	ror	r27
 52e:	f7 95       	ror	r31
 530:	e7 95       	ror	r30
 532:	9f 5f       	subi	r25, 0xFF	; 255
 534:	c1 f7       	brne	.-16     	; 0x526 <__mulsf3_pse+0x9e>
 536:	fe 2b       	or	r31, r30
 538:	88 0f       	add	r24, r24
 53a:	91 1d       	adc	r25, r1
 53c:	96 95       	lsr	r25
 53e:	87 95       	ror	r24
 540:	97 f9       	bld	r25, 7
 542:	08 95       	ret

00000544 <__fp_cmp>:
 544:	99 0f       	add	r25, r25
 546:	00 08       	sbc	r0, r0
 548:	55 0f       	add	r21, r21
 54a:	aa 0b       	sbc	r26, r26
 54c:	e0 e8       	ldi	r30, 0x80	; 128
 54e:	fe ef       	ldi	r31, 0xFE	; 254
 550:	16 16       	cp	r1, r22
 552:	17 06       	cpc	r1, r23
 554:	e8 07       	cpc	r30, r24
 556:	f9 07       	cpc	r31, r25
 558:	c0 f0       	brcs	.+48     	; 0x58a <__fp_cmp+0x46>
 55a:	12 16       	cp	r1, r18
 55c:	13 06       	cpc	r1, r19
 55e:	e4 07       	cpc	r30, r20
 560:	f5 07       	cpc	r31, r21
 562:	98 f0       	brcs	.+38     	; 0x58a <__fp_cmp+0x46>
 564:	62 1b       	sub	r22, r18
 566:	73 0b       	sbc	r23, r19
 568:	84 0b       	sbc	r24, r20
 56a:	95 0b       	sbc	r25, r21
 56c:	39 f4       	brne	.+14     	; 0x57c <__fp_cmp+0x38>
 56e:	0a 26       	eor	r0, r26
 570:	61 f0       	breq	.+24     	; 0x58a <__fp_cmp+0x46>
 572:	23 2b       	or	r18, r19
 574:	24 2b       	or	r18, r20
 576:	25 2b       	or	r18, r21
 578:	21 f4       	brne	.+8      	; 0x582 <__fp_cmp+0x3e>
 57a:	08 95       	ret
 57c:	0a 26       	eor	r0, r26
 57e:	09 f4       	brne	.+2      	; 0x582 <__fp_cmp+0x3e>
 580:	a1 40       	sbci	r26, 0x01	; 1
 582:	a6 95       	lsr	r26
 584:	8f ef       	ldi	r24, 0xFF	; 255
 586:	81 1d       	adc	r24, r1
 588:	81 1d       	adc	r24, r1
 58a:	08 95       	ret

0000058c <_exit>:
 58c:	f8 94       	cli

0000058e <__stop_program>:
 58e:	ff cf       	rjmp	.-2      	; 0x58e <__stop_program>
