
attiny84-pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000018d  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e2  00000000  00000000  00000315  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000138  00000000  00000000  000003f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018a  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000014  00000000  00000000  000006de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000006f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	39 c0       	rjmp	.+114    	; 0xa4 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:
}*/

int main(void)
{
	int i;
	DDRB |= 1<<PB2;
  34:	ba 9a       	sbi	0x17, 2	; 23
	DDRA |= 1<<PA7;
  36:	d7 9a       	sbi	0x1a, 7	; 26
	
	// PWM - phase correct - TOP = 0xFF
    TCCR0A = (1<<COM0A1)|(1<<COM0B1)|(1<<WGM00);
  38:	81 ea       	ldi	r24, 0xA1	; 161
  3a:	80 bf       	out	0x30, r24	; 48
	// clock - no pre-scalar
	TCCR0B = (1<<CS01)|(1<<CS00);
  3c:	83 e0       	ldi	r24, 0x03	; 3
  3e:	83 bf       	out	0x33, r24	; 51
	TCCR1A &= ~(1<<COM1B1);
	// pending
}*/

int main(void)
{
  40:	90 e0       	ldi	r25, 0x00	; 0
  42:	2f ef       	ldi	r18, 0xFF	; 255
  44:	89 2f       	mov	r24, r25
	while (1) 
    {
		for(i=0; i<=255;)
		{
			// PB2 functionality
			OCR0A = i;
  46:	86 bf       	out	0x36, r24	; 54
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  48:	3f ef       	ldi	r19, 0xFF	; 255
  4a:	40 e7       	ldi	r20, 0x70	; 112
  4c:	52 e0       	ldi	r21, 0x02	; 2
  4e:	31 50       	subi	r19, 0x01	; 1
  50:	40 40       	sbci	r20, 0x00	; 0
  52:	50 40       	sbci	r21, 0x00	; 0
  54:	e1 f7       	brne	.-8      	; 0x4e <__SREG__+0xf>
  56:	00 c0       	rjmp	.+0      	; 0x58 <__SREG__+0x19>
  58:	00 00       	nop
  5a:	86 5f       	subi	r24, 0xF6	; 246
	//TCCR1A = 1<<WGM10;
	// clock - no pre-scalar
	//TCCR1B = 1<<CS10;
	while (1) 
    {
		for(i=0; i<=255;)
  5c:	84 30       	cpi	r24, 0x04	; 4
  5e:	99 f7       	brne	.-26     	; 0x46 <__SREG__+0x7>
  60:	89 2f       	mov	r24, r25
		}
			
		for(i=0; i<=255;)
		{
			// PA7 functionality
			OCR0B = i;
  62:	8c bf       	out	0x3c, r24	; 60
  64:	3f ef       	ldi	r19, 0xFF	; 255
  66:	40 e7       	ldi	r20, 0x70	; 112
  68:	52 e0       	ldi	r21, 0x02	; 2
  6a:	31 50       	subi	r19, 0x01	; 1
  6c:	40 40       	sbci	r20, 0x00	; 0
  6e:	50 40       	sbci	r21, 0x00	; 0
  70:	e1 f7       	brne	.-8      	; 0x6a <__SREG__+0x2b>
  72:	00 c0       	rjmp	.+0      	; 0x74 <__SREG__+0x35>
  74:	00 00       	nop
  76:	8c 5e       	subi	r24, 0xEC	; 236
			i +=10;
			//leftMotorReverse(i);
		//	rightMotorReverse(i);
		}
			
		for(i=0; i<=255;)
  78:	84 30       	cpi	r24, 0x04	; 4
  7a:	99 f7       	brne	.-26     	; 0x62 <__SREG__+0x23>
  7c:	82 2f       	mov	r24, r18
			i +=20;
		}
		for(i=255; i>=0;)
		{
			//PB2 functionality
			OCR0A = i;			
  7e:	86 bf       	out	0x36, r24	; 54
  80:	8a 50       	subi	r24, 0x0A	; 10
			// PA7 functionality
			OCR0B = i;
			_delay_ms(100);
			i +=20;
		}
		for(i=255; i>=0;)
  82:	8b 3f       	cpi	r24, 0xFB	; 251
  84:	e1 f7       	brne	.-8      	; 0x7e <__SREG__+0x3f>
  86:	82 2f       	mov	r24, r18
			//	leftMotorForward(i);
			//	rightMotorForward(i);
		}
		for(i=255; i>=0;)
		{
			OCR0B = i;
  88:	8c bf       	out	0x3c, r24	; 60
  8a:	3f ef       	ldi	r19, 0xFF	; 255
  8c:	40 e7       	ldi	r20, 0x70	; 112
  8e:	52 e0       	ldi	r21, 0x02	; 2
  90:	31 50       	subi	r19, 0x01	; 1
  92:	40 40       	sbci	r20, 0x00	; 0
  94:	50 40       	sbci	r21, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <__SREG__+0x51>
  98:	00 c0       	rjmp	.+0      	; 0x9a <__SREG__+0x5b>
  9a:	00 00       	nop
  9c:	84 51       	subi	r24, 0x14	; 20
			// PA7 functionality
			i -=10;
			//	leftMotorForward(i);
			//	rightMotorForward(i);
		}
		for(i=255; i>=0;)
  9e:	8b 3f       	cpi	r24, 0xFB	; 251
  a0:	99 f7       	brne	.-26     	; 0x88 <__SREG__+0x49>
  a2:	d0 cf       	rjmp	.-96     	; 0x44 <__SREG__+0x5>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
