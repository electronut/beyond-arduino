
attiny84-ultrasonic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000056e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  0000056e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000056e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000404  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000182  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001d3  00000000  00000000  00000baa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00000d80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000023a  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000255  00000000  00000000  00001072  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000012c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	7a c0       	rjmp	.+244    	; 0xfa <__vector_2>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	4b c0       	rjmp	.+150    	; 0xae <__vector_11>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a7 36       	cpi	r26, 0x67	; 103
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	9f d0       	rcall	.+318    	; 0x17e <main>
  40:	5a c2       	rjmp	.+1204   	; 0x4f6 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <initHCSR04>:
	// loop till echo pin goes low
	while(!echoDone);

	// disable pin-change interrupt:
	// disable interrupt
	GIMSK &= ~(1 << PCIE0);
  44:	b8 9a       	sbi	0x17, 0	; 23
  46:	08 95       	ret

00000048 <getDistance2>:
  48:	c0 98       	cbi	0x18, 0	; 24
	// disable pin
	PCMSK0 &= ~(1 << PCINT0);
  4a:	85 e3       	ldi	r24, 0x35	; 53

	// calculate duration
	float duration = countTimer0/8000000.0;
  4c:	8a 95       	dec	r24
  4e:	f1 f7       	brne	.-4      	; 0x4c <getDistance2+0x4>
  50:	00 00       	nop
  52:	c0 9a       	sbi	0x18, 0	; 24
  54:	80 e2       	ldi	r24, 0x20	; 32
  56:	8a 95       	dec	r24
  58:	f1 f7       	brne	.-4      	; 0x56 <getDistance2+0xe>
  5a:	c0 98       	cbi	0x18, 0	; 24
  5c:	85 e3       	ldi	r24, 0x35	; 53
  5e:	8a 95       	dec	r24
  60:	f1 f7       	brne	.-4      	; 0x5e <getDistance2+0x16>
  62:	00 00       	nop
  64:	c8 9b       	sbis	0x19, 0	; 25
  66:	fe cf       	rjmp	.-4      	; 0x64 <getDistance2+0x1c>

	// dist = duration * speed of sound * 1/2
	// dist in cm = duration in s * 340.26 * 100 * 1/2
	// = 17013*duration
	distance = 17013.0 * duration;
  68:	c8 9b       	sbis	0x19, 0	; 25
  6a:	06 c0       	rjmp	.+12     	; 0x78 <getDistance2+0x30>
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	01 96       	adiw	r24, 0x01	; 1
	
	return distance;
}
  72:	c8 99       	sbic	0x19, 0	; 25
	
	// reset counter
	int count = 0;
	
	// loop till echo pin goes low
	while(PINA & (1<<PA0))
  74:	fd cf       	rjmp	.-6      	; 0x70 <getDistance2+0x28>
  76:	02 c0       	rjmp	.+4      	; 0x7c <getDistance2+0x34>
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	90 e0       	ldi	r25, 0x00	; 0
	{
		count++;
	}

	// calculate duration
	float duration = (count*5 + 1)/8000000.0;
  7c:	bc 01       	movw	r22, r24
  7e:	66 0f       	add	r22, r22
  80:	77 1f       	adc	r23, r23
  82:	66 0f       	add	r22, r22
  84:	77 1f       	adc	r23, r23
  86:	68 0f       	add	r22, r24
  88:	79 1f       	adc	r23, r25
  8a:	6f 5f       	subi	r22, 0xFF	; 255
  8c:	7f 4f       	sbci	r23, 0xFF	; 255
  8e:	07 2e       	mov	r0, r23
  90:	00 0c       	add	r0, r0
  92:	88 0b       	sbc	r24, r24
  94:	99 0b       	sbc	r25, r25
  96:	10 d1       	rcall	.+544    	; 0x2b8 <__floatsisf>
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	34 e2       	ldi	r19, 0x24	; 36
  9c:	44 ef       	ldi	r20, 0xF4	; 244
  9e:	5a e4       	ldi	r21, 0x4A	; 74
  a0:	a1 d0       	rcall	.+322    	; 0x1e4 <__divsf3>

	// dist = duration * speed of sound * 1/2
	// dist in cm = duration in s * 340.26 * 100 * 1/2
	// = 17013*duration
	distance = 17013.0 * duration;
  a2:	20 e0       	ldi	r18, 0x00	; 0
  a4:	3a ee       	ldi	r19, 0xEA	; 234
  a6:	44 e8       	ldi	r20, 0x84	; 132
  a8:	56 e4       	ldi	r21, 0x46	; 70
  aa:	ba d1       	rcall	.+884    	; 0x420 <__mulsf3>
	

	return distance;
}
  ac:	08 95       	ret

000000ae <__vector_11>:

// timer0 overflow interrupt
ISR(TIM0_OVF_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	af 93       	push	r26
  be:	bf 93       	push	r27
	// increment
	countTimer0 += 255;
  c0:	80 91 60 00 	lds	r24, 0x0060
  c4:	90 91 61 00 	lds	r25, 0x0061
  c8:	a0 91 62 00 	lds	r26, 0x0062
  cc:	b0 91 63 00 	lds	r27, 0x0063
  d0:	81 50       	subi	r24, 0x01	; 1
  d2:	9f 4f       	sbci	r25, 0xFF	; 255
  d4:	af 4f       	sbci	r26, 0xFF	; 255
  d6:	bf 4f       	sbci	r27, 0xFF	; 255
  d8:	80 93 60 00 	sts	0x0060, r24
  dc:	90 93 61 00 	sts	0x0061, r25
  e0:	a0 93 62 00 	sts	0x0062, r26
  e4:	b0 93 63 00 	sts	0x0063, r27
}
  e8:	bf 91       	pop	r27
  ea:	af 91       	pop	r26
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_2>:

// pin-change interrupt handler
ISR(PCINT0_vect)
{
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	2f 93       	push	r18
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	af 93       	push	r26
 10c:	bf 93       	push	r27
	// read PCINT0 (PA0 - pn 13):
	if(PINA & (1 << pinEcho)) {
 10e:	89 b3       	in	r24, 0x19	; 25
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	00 90 65 00 	lds	r0, 0x0065
 116:	02 c0       	rjmp	.+4      	; 0x11c <__vector_2+0x22>
 118:	95 95       	asr	r25
 11a:	87 95       	ror	r24
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <__vector_2+0x1e>
 120:	80 ff       	sbrs	r24, 0
 122:	07 c0       	rjmp	.+14     	; 0x132 <__vector_2+0x38>
		// rising edge:

		// start 8-bit timer
		// Divide by 1
		TCCR0B |= (1<<CS00);
 124:	83 b7       	in	r24, 0x33	; 51
 126:	81 60       	ori	r24, 0x01	; 1
 128:	83 bf       	out	0x33, r24	; 51
		// set overflow interrupt flag
		TIMSK0 |= 1<<TOIE0;
 12a:	89 b7       	in	r24, 0x39	; 57
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	89 bf       	out	0x39, r24	; 57
 130:	1c c0       	rjmp	.+56     	; 0x16a <__vector_2+0x70>
	}
	else {
		// falling edge

		// stop timer
		TCCR0B &= ~(1<<CS00);
 132:	83 b7       	in	r24, 0x33	; 51
 134:	8e 7f       	andi	r24, 0xFE	; 254
 136:	83 bf       	out	0x33, r24	; 51

		// calculate time passed
		countTimer0 += TCNT0;
 138:	22 b7       	in	r18, 0x32	; 50
 13a:	80 91 60 00 	lds	r24, 0x0060
 13e:	90 91 61 00 	lds	r25, 0x0061
 142:	a0 91 62 00 	lds	r26, 0x0062
 146:	b0 91 63 00 	lds	r27, 0x0063
 14a:	82 0f       	add	r24, r18
 14c:	91 1d       	adc	r25, r1
 14e:	a1 1d       	adc	r26, r1
 150:	b1 1d       	adc	r27, r1
 152:	80 93 60 00 	sts	0x0060, r24
 156:	90 93 61 00 	sts	0x0061, r25
 15a:	a0 93 62 00 	sts	0x0062, r26
 15e:	b0 93 63 00 	sts	0x0063, r27

		// reset counter in timer0
		TCNT0 = 0;
 162:	12 be       	out	0x32, r1	; 50

		// set flag
		echoDone = 1;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	80 93 64 00 	sts	0x0064, r24
	}
}
 16a:	bf 91       	pop	r27
 16c:	af 91       	pop	r26
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <main>:
{
	// serial
	//init_serial();

	// HC-SR04
	initHCSR04();
 17e:	62 df       	rcall	.-316    	; 0x44 <initHCSR04>

	// set as output
	DDRB |= (1 << PB0);
 180:	b8 9a       	sbi	0x17, 0	; 23
	DDRA |= (1 << PA1);
 182:	d1 9a       	sbi	0x1a, 1	; 26
	
	char str[16];

	float prevDist = 0.0;
 184:	c1 2c       	mov	r12, r1
 186:	d1 2c       	mov	r13, r1
 188:	e1 2c       	mov	r14, r1
 18a:	f1 2c       	mov	r15, r1
	// loop
	while (1) {

		//float dist = getDistanceHCSR04();
		float dist = getDistance2();
 18c:	5d df       	rcall	.-326    	; 0x48 <getDistance2>
 18e:	06 2f       	mov	r16, r22
 190:	17 2f       	mov	r17, r23
 192:	d8 2f       	mov	r29, r24
 194:	c9 2f       	mov	r28, r25
		// sensor only works till 400 cm - if it exceeds, this value
		// just send previous reading
		if(dist > 500) {
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	4a ef       	ldi	r20, 0xFA	; 250
 19c:	53 e4       	ldi	r21, 0x43	; 67
 19e:	3c d1       	rcall	.+632    	; 0x418 <__gesf2>
 1a0:	18 16       	cp	r1, r24
 1a2:	24 f0       	brlt	.+8      	; 0x1ac <main+0x2e>
	float prevDist = 0.0;
	// loop
	while (1) {

		//float dist = getDistanceHCSR04();
		float dist = getDistance2();
 1a4:	c0 2e       	mov	r12, r16
 1a6:	d1 2e       	mov	r13, r17
 1a8:	ed 2e       	mov	r14, r29
 1aa:	fc 2e       	mov	r15, r28
		// print distance to serial port
		//sprintf(str, "%f\n", dist);
		//send_str(str);
		prevDist = dist;

		if(dist < 15) {
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	40 e7       	ldi	r20, 0x70	; 112
 1b2:	51 e4       	ldi	r21, 0x41	; 65
 1b4:	6c 2d       	mov	r22, r12
 1b6:	7d 2d       	mov	r23, r13
 1b8:	8e 2d       	mov	r24, r14
 1ba:	9f 2d       	mov	r25, r15
 1bc:	0f d0       	rcall	.+30     	; 0x1dc <__cmpsf2>
 1be:	88 23       	and	r24, r24
 1c0:	14 f4       	brge	.+4      	; 0x1c6 <main+0x48>
			PORTA |= (1 << PA1);
 1c2:	d9 9a       	sbi	0x1b, 1	; 27
 1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <main+0x4a>
		}
		else {
			PORTA &= ~(1 << PA1);
 1c6:	d9 98       	cbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c8:	2f ef       	ldi	r18, 0xFF	; 255
 1ca:	81 ee       	ldi	r24, 0xE1	; 225
 1cc:	94 e0       	ldi	r25, 0x04	; 4
 1ce:	21 50       	subi	r18, 0x01	; 1
 1d0:	80 40       	sbci	r24, 0x00	; 0
 1d2:	90 40       	sbci	r25, 0x00	; 0
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <main+0x50>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <main+0x5a>
 1d8:	00 00       	nop
 1da:	d8 cf       	rjmp	.-80     	; 0x18c <main+0xe>

000001dc <__cmpsf2>:
 1dc:	a8 d0       	rcall	.+336    	; 0x32e <__fp_cmp>
 1de:	08 f4       	brcc	.+2      	; 0x1e2 <__cmpsf2+0x6>
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	08 95       	ret

000001e4 <__divsf3>:
 1e4:	0c d0       	rcall	.+24     	; 0x1fe <__divsf3x>
 1e6:	de c0       	rjmp	.+444    	; 0x3a4 <__fp_round>
 1e8:	d6 d0       	rcall	.+428    	; 0x396 <__fp_pscB>
 1ea:	40 f0       	brcs	.+16     	; 0x1fc <__divsf3+0x18>
 1ec:	cd d0       	rcall	.+410    	; 0x388 <__fp_pscA>
 1ee:	30 f0       	brcs	.+12     	; 0x1fc <__divsf3+0x18>
 1f0:	21 f4       	brne	.+8      	; 0x1fa <__divsf3+0x16>
 1f2:	5f 3f       	cpi	r21, 0xFF	; 255
 1f4:	19 f0       	breq	.+6      	; 0x1fc <__divsf3+0x18>
 1f6:	bf c0       	rjmp	.+382    	; 0x376 <__fp_inf>
 1f8:	51 11       	cpse	r21, r1
 1fa:	08 c1       	rjmp	.+528    	; 0x40c <__fp_szero>
 1fc:	c2 c0       	rjmp	.+388    	; 0x382 <__fp_nan>

000001fe <__divsf3x>:
 1fe:	e3 d0       	rcall	.+454    	; 0x3c6 <__fp_split3>
 200:	98 f3       	brcs	.-26     	; 0x1e8 <__divsf3+0x4>

00000202 <__divsf3_pse>:
 202:	99 23       	and	r25, r25
 204:	c9 f3       	breq	.-14     	; 0x1f8 <__divsf3+0x14>
 206:	55 23       	and	r21, r21
 208:	b1 f3       	breq	.-20     	; 0x1f6 <__divsf3+0x12>
 20a:	95 1b       	sub	r25, r21
 20c:	55 0b       	sbc	r21, r21
 20e:	bb 27       	eor	r27, r27
 210:	aa 27       	eor	r26, r26
 212:	62 17       	cp	r22, r18
 214:	73 07       	cpc	r23, r19
 216:	84 07       	cpc	r24, r20
 218:	38 f0       	brcs	.+14     	; 0x228 <__divsf3_pse+0x26>
 21a:	9f 5f       	subi	r25, 0xFF	; 255
 21c:	5f 4f       	sbci	r21, 0xFF	; 255
 21e:	22 0f       	add	r18, r18
 220:	33 1f       	adc	r19, r19
 222:	44 1f       	adc	r20, r20
 224:	aa 1f       	adc	r26, r26
 226:	a9 f3       	breq	.-22     	; 0x212 <__divsf3_pse+0x10>
 228:	33 d0       	rcall	.+102    	; 0x290 <__stack+0x31>
 22a:	0e 2e       	mov	r0, r30
 22c:	3a f0       	brmi	.+14     	; 0x23c <__divsf3_pse+0x3a>
 22e:	e0 e8       	ldi	r30, 0x80	; 128
 230:	30 d0       	rcall	.+96     	; 0x292 <__stack+0x33>
 232:	91 50       	subi	r25, 0x01	; 1
 234:	50 40       	sbci	r21, 0x00	; 0
 236:	e6 95       	lsr	r30
 238:	00 1c       	adc	r0, r0
 23a:	ca f7       	brpl	.-14     	; 0x22e <__divsf3_pse+0x2c>
 23c:	29 d0       	rcall	.+82     	; 0x290 <__stack+0x31>
 23e:	fe 2f       	mov	r31, r30
 240:	27 d0       	rcall	.+78     	; 0x290 <__stack+0x31>
 242:	66 0f       	add	r22, r22
 244:	77 1f       	adc	r23, r23
 246:	88 1f       	adc	r24, r24
 248:	bb 1f       	adc	r27, r27
 24a:	26 17       	cp	r18, r22
 24c:	37 07       	cpc	r19, r23
 24e:	48 07       	cpc	r20, r24
 250:	ab 07       	cpc	r26, r27
 252:	b0 e8       	ldi	r27, 0x80	; 128
 254:	09 f0       	breq	.+2      	; 0x258 <__divsf3_pse+0x56>
 256:	bb 0b       	sbc	r27, r27
 258:	80 2d       	mov	r24, r0
 25a:	bf 01       	movw	r22, r30
 25c:	ff 27       	eor	r31, r31
 25e:	93 58       	subi	r25, 0x83	; 131
 260:	5f 4f       	sbci	r21, 0xFF	; 255
 262:	2a f0       	brmi	.+10     	; 0x26e <__stack+0xf>
 264:	9e 3f       	cpi	r25, 0xFE	; 254
 266:	51 05       	cpc	r21, r1
 268:	68 f0       	brcs	.+26     	; 0x284 <__stack+0x25>
 26a:	85 c0       	rjmp	.+266    	; 0x376 <__fp_inf>
 26c:	cf c0       	rjmp	.+414    	; 0x40c <__fp_szero>
 26e:	5f 3f       	cpi	r21, 0xFF	; 255
 270:	ec f3       	brlt	.-6      	; 0x26c <__stack+0xd>
 272:	98 3e       	cpi	r25, 0xE8	; 232
 274:	dc f3       	brlt	.-10     	; 0x26c <__stack+0xd>
 276:	86 95       	lsr	r24
 278:	77 95       	ror	r23
 27a:	67 95       	ror	r22
 27c:	b7 95       	ror	r27
 27e:	f7 95       	ror	r31
 280:	9f 5f       	subi	r25, 0xFF	; 255
 282:	c9 f7       	brne	.-14     	; 0x276 <__stack+0x17>
 284:	88 0f       	add	r24, r24
 286:	91 1d       	adc	r25, r1
 288:	96 95       	lsr	r25
 28a:	87 95       	ror	r24
 28c:	97 f9       	bld	r25, 7
 28e:	08 95       	ret
 290:	e1 e0       	ldi	r30, 0x01	; 1
 292:	66 0f       	add	r22, r22
 294:	77 1f       	adc	r23, r23
 296:	88 1f       	adc	r24, r24
 298:	bb 1f       	adc	r27, r27
 29a:	62 17       	cp	r22, r18
 29c:	73 07       	cpc	r23, r19
 29e:	84 07       	cpc	r24, r20
 2a0:	ba 07       	cpc	r27, r26
 2a2:	20 f0       	brcs	.+8      	; 0x2ac <__stack+0x4d>
 2a4:	62 1b       	sub	r22, r18
 2a6:	73 0b       	sbc	r23, r19
 2a8:	84 0b       	sbc	r24, r20
 2aa:	ba 0b       	sbc	r27, r26
 2ac:	ee 1f       	adc	r30, r30
 2ae:	88 f7       	brcc	.-30     	; 0x292 <__stack+0x33>
 2b0:	e0 95       	com	r30
 2b2:	08 95       	ret

000002b4 <__floatunsisf>:
 2b4:	e8 94       	clt
 2b6:	09 c0       	rjmp	.+18     	; 0x2ca <__floatsisf+0x12>

000002b8 <__floatsisf>:
 2b8:	97 fb       	bst	r25, 7
 2ba:	3e f4       	brtc	.+14     	; 0x2ca <__floatsisf+0x12>
 2bc:	90 95       	com	r25
 2be:	80 95       	com	r24
 2c0:	70 95       	com	r23
 2c2:	61 95       	neg	r22
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255
 2c6:	8f 4f       	sbci	r24, 0xFF	; 255
 2c8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ca:	99 23       	and	r25, r25
 2cc:	a9 f0       	breq	.+42     	; 0x2f8 <__floatsisf+0x40>
 2ce:	f9 2f       	mov	r31, r25
 2d0:	96 e9       	ldi	r25, 0x96	; 150
 2d2:	bb 27       	eor	r27, r27
 2d4:	93 95       	inc	r25
 2d6:	f6 95       	lsr	r31
 2d8:	87 95       	ror	r24
 2da:	77 95       	ror	r23
 2dc:	67 95       	ror	r22
 2de:	b7 95       	ror	r27
 2e0:	f1 11       	cpse	r31, r1
 2e2:	f8 cf       	rjmp	.-16     	; 0x2d4 <__floatsisf+0x1c>
 2e4:	fa f4       	brpl	.+62     	; 0x324 <__floatsisf+0x6c>
 2e6:	bb 0f       	add	r27, r27
 2e8:	11 f4       	brne	.+4      	; 0x2ee <__floatsisf+0x36>
 2ea:	60 ff       	sbrs	r22, 0
 2ec:	1b c0       	rjmp	.+54     	; 0x324 <__floatsisf+0x6c>
 2ee:	6f 5f       	subi	r22, 0xFF	; 255
 2f0:	7f 4f       	sbci	r23, 0xFF	; 255
 2f2:	8f 4f       	sbci	r24, 0xFF	; 255
 2f4:	9f 4f       	sbci	r25, 0xFF	; 255
 2f6:	16 c0       	rjmp	.+44     	; 0x324 <__floatsisf+0x6c>
 2f8:	88 23       	and	r24, r24
 2fa:	11 f0       	breq	.+4      	; 0x300 <__floatsisf+0x48>
 2fc:	96 e9       	ldi	r25, 0x96	; 150
 2fe:	11 c0       	rjmp	.+34     	; 0x322 <__floatsisf+0x6a>
 300:	77 23       	and	r23, r23
 302:	21 f0       	breq	.+8      	; 0x30c <__floatsisf+0x54>
 304:	9e e8       	ldi	r25, 0x8E	; 142
 306:	87 2f       	mov	r24, r23
 308:	76 2f       	mov	r23, r22
 30a:	05 c0       	rjmp	.+10     	; 0x316 <__floatsisf+0x5e>
 30c:	66 23       	and	r22, r22
 30e:	71 f0       	breq	.+28     	; 0x32c <__floatsisf+0x74>
 310:	96 e8       	ldi	r25, 0x86	; 134
 312:	86 2f       	mov	r24, r22
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	2a f0       	brmi	.+10     	; 0x324 <__floatsisf+0x6c>
 31a:	9a 95       	dec	r25
 31c:	66 0f       	add	r22, r22
 31e:	77 1f       	adc	r23, r23
 320:	88 1f       	adc	r24, r24
 322:	da f7       	brpl	.-10     	; 0x31a <__floatsisf+0x62>
 324:	88 0f       	add	r24, r24
 326:	96 95       	lsr	r25
 328:	87 95       	ror	r24
 32a:	97 f9       	bld	r25, 7
 32c:	08 95       	ret

0000032e <__fp_cmp>:
 32e:	99 0f       	add	r25, r25
 330:	00 08       	sbc	r0, r0
 332:	55 0f       	add	r21, r21
 334:	aa 0b       	sbc	r26, r26
 336:	e0 e8       	ldi	r30, 0x80	; 128
 338:	fe ef       	ldi	r31, 0xFE	; 254
 33a:	16 16       	cp	r1, r22
 33c:	17 06       	cpc	r1, r23
 33e:	e8 07       	cpc	r30, r24
 340:	f9 07       	cpc	r31, r25
 342:	c0 f0       	brcs	.+48     	; 0x374 <__fp_cmp+0x46>
 344:	12 16       	cp	r1, r18
 346:	13 06       	cpc	r1, r19
 348:	e4 07       	cpc	r30, r20
 34a:	f5 07       	cpc	r31, r21
 34c:	98 f0       	brcs	.+38     	; 0x374 <__fp_cmp+0x46>
 34e:	62 1b       	sub	r22, r18
 350:	73 0b       	sbc	r23, r19
 352:	84 0b       	sbc	r24, r20
 354:	95 0b       	sbc	r25, r21
 356:	39 f4       	brne	.+14     	; 0x366 <__fp_cmp+0x38>
 358:	0a 26       	eor	r0, r26
 35a:	61 f0       	breq	.+24     	; 0x374 <__fp_cmp+0x46>
 35c:	23 2b       	or	r18, r19
 35e:	24 2b       	or	r18, r20
 360:	25 2b       	or	r18, r21
 362:	21 f4       	brne	.+8      	; 0x36c <__fp_cmp+0x3e>
 364:	08 95       	ret
 366:	0a 26       	eor	r0, r26
 368:	09 f4       	brne	.+2      	; 0x36c <__fp_cmp+0x3e>
 36a:	a1 40       	sbci	r26, 0x01	; 1
 36c:	a6 95       	lsr	r26
 36e:	8f ef       	ldi	r24, 0xFF	; 255
 370:	81 1d       	adc	r24, r1
 372:	81 1d       	adc	r24, r1
 374:	08 95       	ret

00000376 <__fp_inf>:
 376:	97 f9       	bld	r25, 7
 378:	9f 67       	ori	r25, 0x7F	; 127
 37a:	80 e8       	ldi	r24, 0x80	; 128
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	08 95       	ret

00000382 <__fp_nan>:
 382:	9f ef       	ldi	r25, 0xFF	; 255
 384:	80 ec       	ldi	r24, 0xC0	; 192
 386:	08 95       	ret

00000388 <__fp_pscA>:
 388:	00 24       	eor	r0, r0
 38a:	0a 94       	dec	r0
 38c:	16 16       	cp	r1, r22
 38e:	17 06       	cpc	r1, r23
 390:	18 06       	cpc	r1, r24
 392:	09 06       	cpc	r0, r25
 394:	08 95       	ret

00000396 <__fp_pscB>:
 396:	00 24       	eor	r0, r0
 398:	0a 94       	dec	r0
 39a:	12 16       	cp	r1, r18
 39c:	13 06       	cpc	r1, r19
 39e:	14 06       	cpc	r1, r20
 3a0:	05 06       	cpc	r0, r21
 3a2:	08 95       	ret

000003a4 <__fp_round>:
 3a4:	09 2e       	mov	r0, r25
 3a6:	03 94       	inc	r0
 3a8:	00 0c       	add	r0, r0
 3aa:	11 f4       	brne	.+4      	; 0x3b0 <__fp_round+0xc>
 3ac:	88 23       	and	r24, r24
 3ae:	52 f0       	brmi	.+20     	; 0x3c4 <__fp_round+0x20>
 3b0:	bb 0f       	add	r27, r27
 3b2:	40 f4       	brcc	.+16     	; 0x3c4 <__fp_round+0x20>
 3b4:	bf 2b       	or	r27, r31
 3b6:	11 f4       	brne	.+4      	; 0x3bc <__fp_round+0x18>
 3b8:	60 ff       	sbrs	r22, 0
 3ba:	04 c0       	rjmp	.+8      	; 0x3c4 <__fp_round+0x20>
 3bc:	6f 5f       	subi	r22, 0xFF	; 255
 3be:	7f 4f       	sbci	r23, 0xFF	; 255
 3c0:	8f 4f       	sbci	r24, 0xFF	; 255
 3c2:	9f 4f       	sbci	r25, 0xFF	; 255
 3c4:	08 95       	ret

000003c6 <__fp_split3>:
 3c6:	57 fd       	sbrc	r21, 7
 3c8:	90 58       	subi	r25, 0x80	; 128
 3ca:	44 0f       	add	r20, r20
 3cc:	55 1f       	adc	r21, r21
 3ce:	59 f0       	breq	.+22     	; 0x3e6 <__fp_splitA+0x10>
 3d0:	5f 3f       	cpi	r21, 0xFF	; 255
 3d2:	71 f0       	breq	.+28     	; 0x3f0 <__fp_splitA+0x1a>
 3d4:	47 95       	ror	r20

000003d6 <__fp_splitA>:
 3d6:	88 0f       	add	r24, r24
 3d8:	97 fb       	bst	r25, 7
 3da:	99 1f       	adc	r25, r25
 3dc:	61 f0       	breq	.+24     	; 0x3f6 <__fp_splitA+0x20>
 3de:	9f 3f       	cpi	r25, 0xFF	; 255
 3e0:	79 f0       	breq	.+30     	; 0x400 <__fp_splitA+0x2a>
 3e2:	87 95       	ror	r24
 3e4:	08 95       	ret
 3e6:	12 16       	cp	r1, r18
 3e8:	13 06       	cpc	r1, r19
 3ea:	14 06       	cpc	r1, r20
 3ec:	55 1f       	adc	r21, r21
 3ee:	f2 cf       	rjmp	.-28     	; 0x3d4 <__fp_split3+0xe>
 3f0:	46 95       	lsr	r20
 3f2:	f1 df       	rcall	.-30     	; 0x3d6 <__fp_splitA>
 3f4:	08 c0       	rjmp	.+16     	; 0x406 <__fp_splitA+0x30>
 3f6:	16 16       	cp	r1, r22
 3f8:	17 06       	cpc	r1, r23
 3fa:	18 06       	cpc	r1, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	f1 cf       	rjmp	.-30     	; 0x3e2 <__fp_splitA+0xc>
 400:	86 95       	lsr	r24
 402:	71 05       	cpc	r23, r1
 404:	61 05       	cpc	r22, r1
 406:	08 94       	sec
 408:	08 95       	ret

0000040a <__fp_zero>:
 40a:	e8 94       	clt

0000040c <__fp_szero>:
 40c:	bb 27       	eor	r27, r27
 40e:	66 27       	eor	r22, r22
 410:	77 27       	eor	r23, r23
 412:	cb 01       	movw	r24, r22
 414:	97 f9       	bld	r25, 7
 416:	08 95       	ret

00000418 <__gesf2>:
 418:	8a df       	rcall	.-236    	; 0x32e <__fp_cmp>
 41a:	08 f4       	brcc	.+2      	; 0x41e <__gesf2+0x6>
 41c:	8f ef       	ldi	r24, 0xFF	; 255
 41e:	08 95       	ret

00000420 <__mulsf3>:
 420:	0a d0       	rcall	.+20     	; 0x436 <__mulsf3x>
 422:	c0 cf       	rjmp	.-128    	; 0x3a4 <__fp_round>
 424:	b1 df       	rcall	.-158    	; 0x388 <__fp_pscA>
 426:	28 f0       	brcs	.+10     	; 0x432 <__mulsf3+0x12>
 428:	b6 df       	rcall	.-148    	; 0x396 <__fp_pscB>
 42a:	18 f0       	brcs	.+6      	; 0x432 <__mulsf3+0x12>
 42c:	95 23       	and	r25, r21
 42e:	09 f0       	breq	.+2      	; 0x432 <__mulsf3+0x12>
 430:	a2 cf       	rjmp	.-188    	; 0x376 <__fp_inf>
 432:	a7 cf       	rjmp	.-178    	; 0x382 <__fp_nan>
 434:	eb cf       	rjmp	.-42     	; 0x40c <__fp_szero>

00000436 <__mulsf3x>:
 436:	c7 df       	rcall	.-114    	; 0x3c6 <__fp_split3>
 438:	a8 f3       	brcs	.-22     	; 0x424 <__mulsf3+0x4>

0000043a <__mulsf3_pse>:
 43a:	99 23       	and	r25, r25
 43c:	d9 f3       	breq	.-10     	; 0x434 <__mulsf3+0x14>
 43e:	55 23       	and	r21, r21
 440:	c9 f3       	breq	.-14     	; 0x434 <__mulsf3+0x14>
 442:	95 0f       	add	r25, r21
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	55 1f       	adc	r21, r21
 448:	aa 27       	eor	r26, r26
 44a:	ee 27       	eor	r30, r30
 44c:	ff 27       	eor	r31, r31
 44e:	bb 27       	eor	r27, r27
 450:	00 24       	eor	r0, r0
 452:	08 94       	sec
 454:	67 95       	ror	r22
 456:	20 f4       	brcc	.+8      	; 0x460 <__mulsf3_pse+0x26>
 458:	e2 0f       	add	r30, r18
 45a:	f3 1f       	adc	r31, r19
 45c:	b4 1f       	adc	r27, r20
 45e:	0a 1e       	adc	r0, r26
 460:	22 0f       	add	r18, r18
 462:	33 1f       	adc	r19, r19
 464:	44 1f       	adc	r20, r20
 466:	aa 1f       	adc	r26, r26
 468:	66 95       	lsr	r22
 46a:	a9 f7       	brne	.-22     	; 0x456 <__mulsf3_pse+0x1c>
 46c:	77 95       	ror	r23
 46e:	30 f4       	brcc	.+12     	; 0x47c <__mulsf3_pse+0x42>
 470:	f3 0f       	add	r31, r19
 472:	b4 1f       	adc	r27, r20
 474:	0a 1e       	adc	r0, r26
 476:	12 1e       	adc	r1, r18
 478:	08 f4       	brcc	.+2      	; 0x47c <__mulsf3_pse+0x42>
 47a:	63 95       	inc	r22
 47c:	33 0f       	add	r19, r19
 47e:	44 1f       	adc	r20, r20
 480:	aa 1f       	adc	r26, r26
 482:	22 1f       	adc	r18, r18
 484:	76 95       	lsr	r23
 486:	99 f7       	brne	.-26     	; 0x46e <__mulsf3_pse+0x34>
 488:	87 95       	ror	r24
 48a:	20 f4       	brcc	.+8      	; 0x494 <__mulsf3_pse+0x5a>
 48c:	b4 0f       	add	r27, r20
 48e:	0a 1e       	adc	r0, r26
 490:	12 1e       	adc	r1, r18
 492:	63 1f       	adc	r22, r19
 494:	44 0f       	add	r20, r20
 496:	aa 1f       	adc	r26, r26
 498:	22 1f       	adc	r18, r18
 49a:	33 1f       	adc	r19, r19
 49c:	86 95       	lsr	r24
 49e:	a9 f7       	brne	.-22     	; 0x48a <__mulsf3_pse+0x50>
 4a0:	86 2f       	mov	r24, r22
 4a2:	71 2d       	mov	r23, r1
 4a4:	60 2d       	mov	r22, r0
 4a6:	11 24       	eor	r1, r1
 4a8:	9f 57       	subi	r25, 0x7F	; 127
 4aa:	50 40       	sbci	r21, 0x00	; 0
 4ac:	8a f0       	brmi	.+34     	; 0x4d0 <__mulsf3_pse+0x96>
 4ae:	e1 f0       	breq	.+56     	; 0x4e8 <__mulsf3_pse+0xae>
 4b0:	88 23       	and	r24, r24
 4b2:	4a f0       	brmi	.+18     	; 0x4c6 <__mulsf3_pse+0x8c>
 4b4:	ee 0f       	add	r30, r30
 4b6:	ff 1f       	adc	r31, r31
 4b8:	bb 1f       	adc	r27, r27
 4ba:	66 1f       	adc	r22, r22
 4bc:	77 1f       	adc	r23, r23
 4be:	88 1f       	adc	r24, r24
 4c0:	91 50       	subi	r25, 0x01	; 1
 4c2:	50 40       	sbci	r21, 0x00	; 0
 4c4:	a9 f7       	brne	.-22     	; 0x4b0 <__mulsf3_pse+0x76>
 4c6:	9e 3f       	cpi	r25, 0xFE	; 254
 4c8:	51 05       	cpc	r21, r1
 4ca:	70 f0       	brcs	.+28     	; 0x4e8 <__mulsf3_pse+0xae>
 4cc:	54 cf       	rjmp	.-344    	; 0x376 <__fp_inf>
 4ce:	9e cf       	rjmp	.-196    	; 0x40c <__fp_szero>
 4d0:	5f 3f       	cpi	r21, 0xFF	; 255
 4d2:	ec f3       	brlt	.-6      	; 0x4ce <__mulsf3_pse+0x94>
 4d4:	98 3e       	cpi	r25, 0xE8	; 232
 4d6:	dc f3       	brlt	.-10     	; 0x4ce <__mulsf3_pse+0x94>
 4d8:	86 95       	lsr	r24
 4da:	77 95       	ror	r23
 4dc:	67 95       	ror	r22
 4de:	b7 95       	ror	r27
 4e0:	f7 95       	ror	r31
 4e2:	e7 95       	ror	r30
 4e4:	9f 5f       	subi	r25, 0xFF	; 255
 4e6:	c1 f7       	brne	.-16     	; 0x4d8 <__mulsf3_pse+0x9e>
 4e8:	fe 2b       	or	r31, r30
 4ea:	88 0f       	add	r24, r24
 4ec:	91 1d       	adc	r25, r1
 4ee:	96 95       	lsr	r25
 4f0:	87 95       	ror	r24
 4f2:	97 f9       	bld	r25, 7
 4f4:	08 95       	ret

000004f6 <_exit>:
 4f6:	f8 94       	cli

000004f8 <__stop_program>:
 4f8:	ff cf       	rjmp	.-2      	; 0x4f8 <__stop_program>
